(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{375:function(e,t,a){"use strict";a.r(t);var n=a(45),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"为什么需要单线程限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要单线程限制"}},[e._v("#")]),e._v(" 为什么需要单线程限制？")]),e._v(" "),a("p",[e._v("在第一章，我们讨论了当调用栈中有长时间运行的函数调用时发生了什么。")]),e._v(" "),a("p",[e._v("假如我们在浏览器里运行一个复杂的图像变换算法。")]),e._v(" "),a("p",[e._v("当调用栈执行有函数需要执行时，浏览器是不能做其他任何事情的--它会被阻塞。此时浏览器不会渲染，也不会运行任何代码，你的UI完全的卡住了。")]),e._v(" "),a("p",[e._v("一旦你的浏览器在调用栈开始处理过多的任务，它将会停止响应很长时间。在那时，许多浏览器将会提出一个异常警告，询问是否需要关闭该也页面。\n这个提醒非常丑陋：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3ae6a7de1034caca80807ca43beb134~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),e._v(" "),a("h2",{attrs:{id:"js程序的构建块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js程序的构建块"}},[e._v("#")]),e._v(" JS程序的构建块")]),e._v(" "),a("p",[e._v("你可能在一个单独的js文件里写程序，但是你的程序一般有很多块组成，而且某个时间上只有一个块在执行，其余的将会稍后执行。最常见的块单元就是函数。\n大多数开发者刚接触JS似乎有一个这样的理解，‘稍后’不是立刻发生在now之后的。"),a("br"),e._v("\n换句话讲，当前不能完成的任务将会异步完成，这样你就不会不经意间遇到以上提及的 UI 阻塞行为。")]),e._v(" "),a("div",{staticClass:"language-// ajax 为一个库提供的任意 ajax 函数 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   var response = ajax('https://example.com/api'); \n   console.log(response); \n   // 'response' 将不会有数据返回\n")])])]),a("p",[e._v("标准的AJAX请求不会同步完成，这意味着ajax方法中的代码还没有任何返回值给response变量。\n一个简单的方式去等待异步方法的返回，就是使用回调函数")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ajax('https://example.com/api', function(response) { \nconsole.log(response);\n// `response` 现在可用了 \n});\n")])])]),a("p",[e._v("你可以完全发起一个同步的ajax请求。但是永远不要这样做。如果你发起了一个同步的请求，你的JS程序的UI将会阻塞，此时用户不能点击，输入数据，导航或者滚动。这将会冻结任何用户的交互体验，非常的糟糕。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 假设你用的 jQuery\njQuery.ajax({\n    url: 'https://api.example.com/endpoint',\n    success: function(response) {\n        // 这里写回调\n    },\n    async: false //同步的方式\n});\n")])])]),a("p",[e._v("这种代码长这样，但是绝对不要这样做，不要毁了你的web。")]),e._v(" "),a("p",[e._v("上面是一个例子，我们可以把任何代码都放到异步执行里。")]),e._v(" "),a("p",[e._v("This can be done with the setTimeout(callback, milliseconds) function. What the setTimeout function does is to set up an event (a timeout) to happen later.")]),e._v(" "),a("p",[e._v("setTimeout可以达到这个效果，setTimeout做的事情就是设置一个稍后执行的event。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function first() {\n    console.log('first');\n}\nfunction second() {\n    console.log('second');\n}\nfunction third() {\n    console.log('third');\n}\nfirst();\nsetTimeout(second, 1000); // Invoke `second` after 1000ms\nthird();\n")])])]),a("p",[e._v("我们将会得到这样的输出：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("first\nthird\nsecond\n")])])]),a("h2",{attrs:{id:"什么是event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是event-loop"}},[e._v("#")]),e._v(" 什么是Event Loop?")]),e._v(" "),a("p",[e._v("我们以一个稍微有点奇怪的声明开始，虽然它可以使JS代码异步(比如之前讨论的 "),a("code",[e._v("setTimetout")]),e._v(")，直到ES6，实际上 JavaScript 本身并没有集成任何直接的异步编程概念。JavaScript 引擎只允许在任意时刻执行单个的程序片段。")]),e._v(" "),a("p",[e._v("更多JS引擎的细节，请看前一章。")]),e._v(" "),a("p",[e._v("所以，谁告诉JS引擎执行代码片段？实际上，JS引擎不是孤立执行的，它运行在一个寄宿环境中（Chrome或者Node）。实际上在今天，JS嵌入了几乎所有类型的硬件，从机器人到电灯泡。每一个设备为JS引擎提供了一个不同的寄宿环境。")]),e._v(" "),a("p",[e._v("所有宿主环境都含有一个被称为"),a("strong",[e._v("事件循环")]),e._v("的内置机制，随着时间的推移，事件循环会执行程序中多个代码片段，每次都会调用 JS 引擎。")]),e._v(" "),a("p",[e._v("这意味着JS引擎只是一种按需执行的环境。这是一个封闭的环境，在其中进行事件的调度(运行JS 代码)。")]),e._v(" "),a("p",[e._v("所以，举个例子。当你的程序发起了一个请求去获取服务器的数据，并设置了一个回调函数。JS引擎告诉寄宿环境‘hi,我将会暂时挂起运行了，你什么时候完成了网络请求，拿到了数据，请调用回调函数’")]),e._v(" "),a("p",[e._v("浏览器之后设定了网络回应的监听，等有数据返回，它把回调函数加入到EventLoop中。\n看一下示意图")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26e31aa3aab94c4ea4ce61f9e431b0ec~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),e._v(" "),a("p",[e._v("什么是网页 API ？本质上，你没有权限访问这些线程，你只能够调用它们。它们是浏览器自带的，且可以在浏览器中进行并发操作。如果你是个 Node.js 开发者，这些是 C++ APIs。")]),e._v(" "),a("h3",{attrs:{id:"说了半天-到底eventloop是啥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说了半天-到底eventloop是啥"}},[e._v("#")]),e._v(" 说了半天，到底EventLoop是啥？")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84ca8acd67a042a38c58e47cacd71416~tplv-k3u1fbpfcp-zoom-1.image",alt:"事件循环图示"}})]),e._v(" "),a("p",[e._v("EventLoop只有一项简单的工作－--监测调用栈和回调队列。如果调用栈是空的，它会从回调队列中取得第一个事件然后入栈，然后执行。")]),e._v(" "),a("p",[e._v("这样一次遍历被称为一个 tick。每个事件就是一个回调函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log('Hi');\nsetTimeout(function cb1() { \n    console.log('cb1');\n}, 5000);\nconsole.log('Bye');\n")])])]),a("p",[e._v("让我们执行这段代码，然后看看会发生什么：")]),e._v(" "),a("p",[e._v("1.空状态。浏览器控制台是空的，调用栈也是空的。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d67b4e782024fab8e2f2982018d5fcf~tplv-k3u1fbpfcp-zoom-1.image",alt:"空状态图例"}})]),e._v(" "),a("p",[e._v("2."),a("code",[e._v("console.log('Hi')")]),e._v(" 入栈。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6790ab0e22a4c82bd54701a5ac1ca87~tplv-k3u1fbpfcp-zoom-1.image",alt:"入栈图例"}})]),e._v(" "),a("p",[e._v("3.执行 "),a("code",[e._v("console.log('Hi')")]),e._v("。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df7cc66c44634c2d987196f153768d3c~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("4."),a("code",[e._v("console.log('Hi')")]),e._v(" 出栈")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a73443be482452b9f692e57b925b011~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("code",[e._v("setTimeout(function cb1() { ... })")]),e._v(" 入栈。")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9b92a60e38d4a91a9a65903674330a7~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("6.执行 "),a("code",[e._v("setTimeout(function cb1() { ... })")]),e._v("，浏览器创建定时器作为网页 API 的一部分并将会为你处理倒计时。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cae838d8e94f4740a8a2166d51f73ad1~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("7."),a("code",[e._v("setTimeout(function cb1() { ... })")]),e._v(" 执行完毕并出栈。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2ee97d558d645ee8d8661519490dd9b~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("8."),a("code",[e._v("console.log('Bye')")]),e._v(" 入栈。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7d35bafa8394f8a8eeeb6a64dad1583~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("9.执行 "),a("code",[e._v("console.log('Bye')")]),e._v("。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bfc79e0251d409bb54f6e34620d84c4~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("10."),a("code",[e._v("console.log('Bye')")]),e._v(" 出栈。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e53c34ea240546599760e3715ff666f3~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("11.至少 5 秒之后，定时器结束运行并把 "),a("code",[e._v("cb1")]),e._v(" 回调添加到回调队列。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/755fb09ec4e8440589b91bee82a7e8bd~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("12.事件循环从回调队列中获得 "),a("code",[e._v("cb1")]),e._v(" 函数并且将其入栈。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5448ed99993448a2950c8c389ee8b0e7~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("13.运行 "),a("code",[e._v("cb1")]),e._v(" 函数并将 "),a("code",[e._v("console.log('cb1')")]),e._v(" 入栈。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de48f66fe1544eac803b81b5082ce0db~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("14.执行 "),a("code",[e._v("console.log('cb1')")]),e._v("。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/761ce4ceab3d42c084981c11df594df7~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("15."),a("code",[e._v("console.log('cb1')")]),e._v(" 出栈。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/802b76d8bac04cfb9883620535aebc18~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),a("p",[e._v("16."),a("code",[e._v("cb1")]),e._v(" 出栈")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6601f21bdc41490393af153204e422fe~tplv-k3u1fbpfcp-zoom-1.image",alt:""}}),e._v("\nES6 指明了EventLoop如何工作的，这意味着从技术上讲EventLoop在 JS 引擎负责的范围之内，而 JS 引擎将不再只是扮演着宿主环境的角色。"),a("br"),e._v("\nES6 中 Promise 的出现是导致改变的主要原因之一，因为 ES6 要求更多权限，可以更直接，更细粒度地控制事件循环队列中的调度操作(之后会深入探讨)。")]),e._v(" "),a("h2",{attrs:{id:"settimeout-是如何工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-是如何工作的"}},[e._v("#")]),e._v(" setTimeout(…) 是如何工作的？")]),e._v(" "),a("p",[e._v("setTimeout没有自动把你的回调放入Loop队列。它设置了一个计时器。当计时器到了，宿主环境将回调放置进了EventLoop，这样可以在未来拾取并执行它。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("setTimeout(myCallback, 1000);\n")])])]),a("p",[e._v("这不意味着1000毫秒之后它会被执行，只是会被添加到事件队列中。当队列中此时有其他已经添加进去的事件时，你的回调就只能等待。\n现在，你知道Event Loop 如何运作的，也知道setTimeout是如何工作的：调用time传入参数0只是延缓执行直到调用栈被清空。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log('Hi');\nsetTimeout(function() {\n    console.log('callback');\n}, 0);\nconsole.log('Bye');\n")])])]),a("p",[e._v("所以尽管设置了定时器是0，但是输出的是这样的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Hi\nBye\ncallback\n")])])]),a("h2",{attrs:{id:"es6的job是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6的job是什么"}},[e._v("#")]),e._v(" ES6的Job是什么 ?")]),e._v(" "),a("p",[e._v("一个新的概念，叫做Job队列（这里的Job也就是微任务），在ES6中被引入了。它始终在Event Loop队列的顶部。你极有可能在处理 Promises(之后会介绍) 的异步行为的时候无意间接触到这一概念。\n现在我们仅仅接触了概念，稍后你就会理解这些行为是如何被调度和处理的")]),e._v(" "),a("p",[e._v("想象这样的场景：Job队列附加在Event Loop队列中每个 tick 末尾的队列。Event Loop的一个 tick 所产生的某些异步操作不会导致添加全新的事件到事件循环队列中，但是反而会在当前 tick 的作业队列末尾添加一个作业项。")]),e._v(" "),a("p",[e._v("这意味着你可以添加一个其他的函数稍后执行，而且你可以确信它将会被在其他功能之前被执行。")]),e._v(" "),a("p",[e._v("一个Job可以导致其他的更多的Job被添加在同一个队列的末尾。"),a("br"),e._v("\n理论上，它可能是一个Job Loop，它无限循环的添加事件，这会让程序无法获得必要的资源继续执行，直到下一个tick.概念上讲，这有点像在代码中执行了一个无限循环。")]),e._v(" "),a("p",[e._v("Jobs are kind of like the setTimeout(callback, 0) “hack” but implemented in such a way that they introduce a much more well-defined and guaranteed ordering: later, but as soon as possible.\nJob有点像setTimeout(callback, 0)，但是实现方式不同。它们拥有明确定义和有保证的执行顺序：稍后执行，但还是要尽可能的快")]),e._v(" "),a("h2",{attrs:{id:"回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调"}},[e._v("#")]),e._v(" 回调")]),e._v(" "),a("p",[e._v("就像你已经知道的那样，回调是目前非常普遍的一种方式去表达和管理异步编程。确实，回调是最重要的异步模式。数不尽的JS程序，即使是非常复杂和巧妙的的应用，也是基于回调的。")]),e._v(" "),a("p",[e._v("尽管回调也有缺点，而且许多开发者在尝试去找更好的异步模式。但是你如果不理解实现原理，那基本上是不可能有效使用任何抽象化的语法。\n在接下来的章节，，我们将会深入探究这些抽象语法并理解更复杂的异步模式的必要性。")]),e._v(" "),a("h3",{attrs:{id:"嵌套回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套回调"}},[e._v("#")]),e._v(" 嵌套回调")]),e._v(" "),a("p",[e._v("看代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("listen('click', function (e){\n    setTimeout(function(){\n        ajax('https://api.example.com/endpoint', function (text){\n            if (text == \"hello\") {\n\t        doSomething();\n\t    }\n\t    else if (text == \"world\") {\n\t        doSomethingElse();\n            }\n        });\n    }, 500);\n});\n")])])]),a("p",[e._v("代码里有3个函数嵌套，每一个都表示一个异步的步骤。\n这个风格的代码，经常被叫做‘回调地狱’。回调地狱不是一个嵌套/缩进的格式问题，它有更深刻的问题。")]),e._v(" "),a("p",[e._v("首先，我们在等待'click'事件，然后等待一段定时器去触发，然后我们需要再次等待Ajax回应，此时会再次全部重复一遍。\n乍一眼看上去，可以上把以上具有异步特性的代码拆分为按步骤执行的代码，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("listen('click', function (e) {\n\t// ..\n});\n")])])]),a("p",[e._v("然后")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("setTimeout(function(){\n    // ..\n}, 500);\n")])])]),a("p",[e._v("再然后")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ajax('https://api.example.com/endpoint', function (text){\n    // ..\n});\n")])])]),a("p",[e._v("最后")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (text == "hello") {\n    doSomething();\n}\nelse if (text == "world") {\n    doSomethingElse();\n}\n')])])]),a("p",[e._v("以这样顺序执行的方式来表示异步代码看起来一气呵成，应该有这样的方法吧？")]),e._v(" "),a("h2",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[e._v("#")]),e._v(" Promise")]),e._v(" "),a("p",[e._v("查看如下代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var x = 1;\nvar y = 2;\nconsole.log(x + y);\n")])])]),a("p",[e._v("这个很直观：计算出 x 和 y 的值,然后在控制台打印出来。"),a("br"),e._v("\n但如果 x 或者 y 的初始值是不存在的或不确定的呢？假设，在表达式中使用 x 和 y 之前，我们需要从服务器得到 x 和 y 的值。假设函数 "),a("code",[e._v("loadX")]),e._v(" 和 "),a("code",[e._v("loadY")]),e._v(" 分别从服务器获取 x 和 y 的值。然后，一旦得 "),a("code",[e._v("x")]),e._v(" 和 "),a("code",[e._v("y")]),e._v(" 的值，就可以使用 "),a("code",[e._v("sum")]),e._v(" 函数计算出和值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function sum(getX, getY, callback) {\n    var x, y;\n    getX(function(result) {\n        x = result;\n        if (y !== undefined) {\n            callback(x + y);\n        }\n    });\n    getY(function(result) {\n        y = result;\n        if (x !== undefined) {\n            callback(x + y);\n        }\n    });\n}\n// A sync or async function that retrieves the value of `x`\nfunction fetchX() {\n    // ..\n}\n\n\n// A sync or async function that retrieves the value of `y`\nfunction fetchY() {\n    // ..\n}\nsum(fetchX, fetchY, function(result) {\n    console.log(result);\n});\n")])])]),a("p",[e._v("这里需要记住的一点是－在代码片段中，"),a("code",[e._v("x")]),e._v(" 和 "),a("code",[e._v("y")]),e._v(" 是未来值，我们用 "),a("code",[e._v("sum(..)")]),e._v("(从外部)来计算和值，但是并没有判断"),a("code",[e._v("x")]),e._v(" 和 "),a("code",[e._v("y")]),e._v(" 是否马上同时有值。\n这个粗糙的基于回调的技术还有很多需要改进的地方。这只是一小步，来帮助你理解使用未来值而不用担心值何时可用的好处。")]),e._v(" "),a("h2",{attrs:{id:"promise-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-值"}},[e._v("#")]),e._v(" Promise 值")]),e._v(" "),a("p",[e._v("让我们简略地看一下如何用 Promises 来表示 "),a("code",[e._v("x+y")]),e._v(" ：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function sum(xPromise, yPromise) {\n\t// `Promise.all([ .. ])` 包含一组 Promise,\n\t// 并返回一个新的 Promise 来等待所有 Promise 执行完毕\n\treturn Promise.all([xPromise, yPromise])\n\n\t// 当新 Promise 解析完毕，就可以同时获得 `x` 和 `y` 的值并相加。\n\t.then(function(values){\n\t\t// `values` 是之前解析 promises 返回的消息数组\n\t\treturn values[0] + values[1];\n\t} );\n}\n\n// `fetchX()` and `fetchY()` 返回 promise 来取得各自的返回值，这些值返回是无时序的。\nsum(fetchX(), fetchY())\n\n// 获得一个计算两个数和值的 promise，现在，就可以链式调用 `then(...)` 来处理返回的 promise。\n.then(function(sum){\n    console.log(sum);\n});\n")])])]),a("p",[e._v("以上代码片段含有两层Promise。")]),e._v(" "),a("p",[a("code",[e._v("fetchX()")]),e._v(" 和 "),a("code",[e._v("fetchY()")]),e._v(" 都是直接调用，它们的返回值(promises!)都被传入 "),a("code",[e._v("sum(…)")]),e._v(" 作为参数。虽然这些 promises 的 返回值也许会在现在或之后返回，但是无论如何每个 promise 都具有相同的异步行为。我们可以的推算 "),a("code",[e._v("x")]),e._v(" 和 "),a("code",[e._v("y")]),e._v(" 是与时间无关的值。暂时称他们为未来值。")]),e._v(" "),a("p",[e._v("第二层次的 promise 是由 "),a("code",[e._v("sum(…)")]),e._v(" (通过 Promise.all([ ... ]))所创建和返回的，然后通过调用 "),a("code",[e._v("then(…)")]),e._v(" 来等待 promise 的返回值。当 "),a("code",[e._v("sum(…)")]),e._v(" 运行结束，返回 sum 未来值然后就可以打印出来。我们在 "),a("code",[e._v("sum(…)")]),e._v(" 内部隐藏了等待未来值 "),a("code",[e._v("x")]),e._v(" 和 "),a("code",[e._v("y")]),e._v(" 的逻辑。")]),e._v(" "),a("p",[a("strong",[e._v("注意：")]),e._v(" 在 "),a("code",[e._v("sum(…)")]),e._v(" 内部，"),a("code",[e._v("Promise.all([ … ])")]),e._v("创建了一个 promise(在等待 "),a("code",[e._v("promiseX")]),e._v(" 和 "),a("code",[e._v("promiseY")]),e._v(" 解析之后)的链式调用 ，"),a("code",[e._v(".then(…)")]),e._v(" 创建了另一个 promise，该 promise 会由代码 "),a("code",[e._v("values[0] + values[1]")]),e._v(" 立刻进行解析(返回相加结果)。因此，在代码片段的末尾即 "),a("code",[e._v("sum(…)")]),e._v(" 的末尾链式调用 "),a("code",[e._v("then(…)")]),e._v("－实际上是在操作第二个返回的 promise 而不是第一个由 "),a("code",[e._v("Promise.all([ ... ])")]),e._v(" 创建返回的 promise。同样地，虽然我们没有在第二个"),a("code",[e._v("then(…)")]),e._v(" 之后进行链式调用，但是它也创建了另一个 promise，我们可以选择观察／使用该 promise。我们将会在本章的随后内容中进行详细地探讨 promise 的链式调用相关。")]),e._v(" "),a("p",[e._v("在 Promises 中，实际上 "),a("code",[e._v("then(…)")]),e._v(" 函数可以传入两个函数作为参数，第一个函数是成功函数，第二个是失败函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sum(fetchX(), fetchY())\n.then(\n    // 成功句柄\n    function(sum) {\n        console.log( sum );\n    },\n    // 拒绝句柄\n    function(err) {\n    \tconsole.error( err ); // bummer!\n    }\n);\n")])])]),a("p",[e._v("当获取 "),a("code",[e._v("x")]),e._v(" 或者 "),a("code",[e._v("y")]),e._v(" 出现错误或者计算和值的时候出现错误，"),a("code",[e._v("sum(…)")]),e._v(" 返回的 promise 将会失败，传入 "),a("code",[e._v("then(…)")]),e._v(" 作为第二个参数的回调错误处理程序将会接收 promise 的返回值。")]),e._v(" "),a("p",[e._v("因为 Promise 封装了时间相关的状态－等待外部的成功或者失败的返回值，Promise 本身是与时间无关的，这样就能够以可预测的方式组成(合并) Promise 而不用关心时序或者返回结果。")]),e._v(" "),a("p",[e._v("除此之外，一旦 Promise 解析完成，它就会一直保持不可变的状态且可以被随意观察。")]),e._v(" "),a("p",[e._v("链式调用 promise 有时候真的很管用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function delay(time) {\n    return new Promise(function(resolve, reject){\n        setTimeout(resolve, time);\n    });\n}\n\ndelay(1000)\n.then(function(){\n    console.log("after 1000ms");\n    return delay(2000);\n})\n.then(function(){\n    console.log("after another 2000ms");\n})\n.then(function(){\n    console.log("step 4 (next Job)");\n    return delay(5000);\n})\n// ...\n')])])]),a("p",[e._v("调用 "),a("code",[e._v("delay(2000)")]),e._v(" 创建一个将在 2 秒后返回成功的 promise，然后，从第一个 "),a("code",[e._v("then(…)")]),e._v(" 的成功回调函数中返回该 promise，这会导致第二个 "),a("code",[e._v("then(…)")]),e._v(" 返回的 promise 等待 2 秒后返回成功的 promise。")]),e._v(" "),a("p",[a("strong",[e._v("Note：")]),e._v(" 因为一个 promise 一旦结束，它的内部状态就不可以从外部改变，所以可以安全地把状态值随意分发给任意第三方。当涉及多方观察 Promise 的返回结果时候更是如此。不可变性听起来像是个晦涩的科学课题，但是，实际上这是 Promise 最根本和重要的方面，你得好好研究研究。")]),e._v(" "),a("h2",{attrs:{id:"promise-使用时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-使用时机"}},[e._v("#")]),e._v(" Promise 使用时机")]),e._v(" "),a("p",[e._v("Promise 的一个重要细节即确定某些值是否是真正的 Promise。换句话说，这个值是否具有 Promise 的行为。")]),e._v(" "),a("p",[e._v("我们可以利用 "),a("code",[e._v("new Promise(…)")]),e._v(" 语法来创建 Promise，然后，你会认为使用 "),a("code",[e._v("p instanceof Promise")]),e._v(" 来检测某个对象是否是 Promise 类的实例。然而，并不全然如此。")]),e._v(" "),a("p",[e._v("主要的原因在于你可以从另一个浏览器窗口(比如 iframe)获得 Promise 实例，iframe 中的 Promise 不同于当前浏览器窗口或框架中的 Promise，因此，会导致检测 Promise 实例失败。")]),e._v(" "),a("p",[e._v("除此之外，库或框架或许会选择使用自身自带的 Promise 而不是原生的 ES6 实现的 Promise。实际工作中，你可以使用库自带的 Promise 来兼容不支持 Promise 的老版本浏览器。")]),e._v(" "),a("h2",{attrs:{id:"异常捕获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常捕获"}},[e._v("#")]),e._v(" 异常捕获")]),e._v(" "),a("p",[e._v("如果在创建 Promise 或者是在观察解析 Promise 返回结果的任意时刻，遇到了诸如 "),a("code",[e._v("TypeError")]),e._v(" 或者 "),a("code",[e._v("ReferenceError")]),e._v(" 的 JavaScript 错误异常，这个异常会被捕获进而强制 Promise 为失败状态。")]),e._v(" "),a("p",[e._v("比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = new Promise(function(resolve, reject){\n    foo.bar();\t  // `foo` 未定义，产生错误!\n    resolve(374); // 永不执行 :(\n});\n\np.then(\n    function fulfilled(){\n        // 永不执行 :(\n    },\n    function rejected(err){\n        // `err` 会是一个 `TypeError` 异常对象\n\t     // 由于 `foo.bar()` 代码行.\n    }\n);\n")])])]),a("p",[e._v("但是，如果 Promise 成功解析了而在成功解析的监听函数("),a("code",[e._v("then(…)")]),e._v(" 注册回调)中抛出 JS 运行错误会怎么样？仍然可以捕捉到该异常，但你会发现处理这些异常的方式有些让人奇怪：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = new Promise( function(resolve,reject){\n\tresolve(374);\n});\n\np.then(function fulfilled(message){\n    foo.bar();\n    console.log(message);   // 永不执行\n},\n    function rejected(err){\n        // 永不执行\n    }\n);\n")])])]),a("p",[e._v("看起来 "),a("code",[e._v("foo.bar()")]),e._v(" 抛出的错误异常真的被捕获到了。但其实事实上并没有，我们没有监测到其中一些更深入的错误。"),a("code",[e._v("p.then(…)")]),e._v(" 调用本身返回另一个 promise，该promise将处理rejiected句柄。")]),e._v(" "),a("p",[a("strong",[e._v("拓展一下以上的说明，这是原文没有的。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = new Promise( function(resolve,reject){\n\tresolve(374);\n});\n\np.then(function fulfilled(message){\n    foo.bar();\n    console.log(message);   // 永不执行\n},\n    function rejected(err){\n        // 永不执行\n    }\n).then(\nfunction() {},\nfunction(err) { console.log('err', err);}\n);\n")])])]),a("p",[e._v("如上代码所示就可以真正捕获到 promise 成功解析回调函数里面的代码错误。")]),e._v(" "),a("h2",{attrs:{id:"处理未捕获的异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理未捕获的异常"}},[e._v("#")]),e._v(" 处理未捕获的异常")]),e._v(" "),a("p",[e._v("据说一些技巧能更好的处理异常。")]),e._v(" "),a("p",[e._v("普遍的做法是为 Promises 添加 "),a("code",[e._v("done(..)")]),e._v(' 回调，这会标记 promise 链的状态为 "done."。'),a("code",[e._v("done(…)")]),e._v(" 并不会创建和返回 promise，因此，当不存在链式 promise 的时候，传入 "),a("code",[e._v("done(..)")]),e._v(" 的回调就不会抛出错误。")]),e._v(" "),a("p",[e._v("和未捕获的错误状况一样：任何在 "),a("code",[e._v("done(..)")]),e._v(" 失败处理函数中的异常都将会被抛出为全局错误(基本上是在开发者控制台)。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = Promise.resolve(374);\n\np.then(function fulfilled(msg){\n    // 数字没有字符类的函数，所以会报错\n    console.log(msg.toLowerCase());\n})\n.done(null, function() {\n    // 若发生错误，将会抛出全局错误\n});\n")])])]),a("h2",{attrs:{id:"es8-中的-async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es8-中的-async-await"}},[e._v("#")]),e._v(" ES8 中的 Async/await")]),e._v(" "),a("p",[e._v("JavaScript ES8 中介绍了 "),a("code",[e._v("async/await")]),e._v("，这使得处理 Promises 更加容易了。我们将会简要介绍 "),a("code",[e._v("async/await")]),e._v(" 的所有可能姿势并利用其来书写异步代码。\n先瞧瞧 async/await 工作原理。")]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("async")]),e._v(" 函数定义一个异步函数。该函数会返回"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",target:"_blank",rel:"noopener noreferrer"}},[e._v("异步函数"),a("OutboundLink")],1),e._v("对象。"),a("code",[e._v("AsyncFunction")]),e._v(" 对象表示在异步函数中运行代码。")]),e._v(" "),a("p",[e._v("当调用异步函数的时候，它会返回一个 "),a("code",[e._v("Promise")]),e._v("。异步函数返回时，返回值并不是 "),a("code",[e._v("Promise")]),e._v("，但会自动创建一个 "),a("code",[e._v("Promise")]),e._v(" ，并使用返回值来解析该 "),a("code",[e._v("Promise")]),e._v("。当 "),a("code",[e._v("async")]),e._v(" 函数抛出异常，"),a("code",[e._v("Promise")]),e._v(" 失败回调会获取抛出的异常值。")]),e._v(" "),a("p",[a("code",[e._v("async")]),e._v(" 函数可以包含一个 "),a("code",[e._v("await")]),e._v(" 表达式，这样就可以暂停函数的执行来等待传入的 Promise 的返回结果，之后重启异步函数的执行并返回解析值。")]),e._v(" "),a("p",[e._v("你可以把 JavaScript 中的 "),a("code",[e._v("Promise")]),e._v(" 看作 Java 中的 "),a("code",[e._v("Future")]),e._v(" 或 "),a("code",[e._v("C#")]),e._v(" 中的 Task。")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("async/await")]),e._v(" 本意是用来简化 promises 的使用。")])]),e._v(" "),a("p",[e._v("看下如下代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 标准 JavaScript 函数\nfunction getNumber1() {\n    return Promise.resolve('374');\n}\n// 和 getNumber1 一样\nasync function getNumber2() {\n    return 374;\n}\n")])])]),a("p",[e._v("类似地，抛出异常的函数等价于返回失败的 promises。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function f1() {\n    return Promise.reject('Some error');\n}\nasync function f2() {\n    throw 'Some error';\n}\n")])])]),a("p",[a("code",[e._v("await")]),e._v(" 关键字只能在 "),a("code",[e._v("async")]),e._v(" 函数中使用并且允许你同步等待 Promise。如果在 "),a("code",[e._v("async")]),e._v(" 函数外使用 promises，我们仍然必须使用 "),a("code",[e._v("then")]),e._v(" 回调。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("async function loadData() {\n    // `rp` 是个发起 promise 的函数。\n    var promise1 = rp('https://api.example.com/endpoint1');\n    var promise2 = rp('https://api.example.com/endpoint2');\n   \n    // 现在，并发请求两个 promise，现在我们必须等待它们结束运行。\n    var response1 = await promise1;\n    var response2 = await promise2;\n    return response1 + ' ' + response2;\n}\n// 因为不再使用 `async function`，所以必须使用 `then`。\nloadData().then(() => console.log('Done'));\n")])])]),a("p",[e._v("你也可以使用异步函数表达式来定义异步函数。"),a("br"),e._v("\n异步函数表达式拥有和异步函数语句相近的语法。"),a("br"),e._v("\n异步函数表达式和异步函数语句的主要区别在于函数名，异步函数表达式可以忽略函数名来创建匿名函数。"),a("br"),e._v("\n异步函数表达式可以被用作 IIFE(立即执行函数表达式)，可以在定义的时候立即运行。")]),e._v(" "),a("p",[e._v("像这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var loadData = async function() {\n    // `rp` 是个发起 promise 的函数。\n    var promise1 = rp('https://api.example.com/endpoint1');\n    var promise2 = rp('https://api.example.com/endpoint2');\n   \n    // 现在，并发请求两个 promise，现在我们必须等待它们结束运行。\n    var response1 = await promise1;\n    var response2 = await promise2;\n    return response1 + ' ' + response2;\n}\n")])])]),a("p",[e._v("更为重要的是，所有的主流浏览器都支持 async/await")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d34e17778f547f48463dc248c19126b~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),e._v(" "),a("p",[e._v("如果该兼容性不符合你的需求，你可以使用诸如 "),a("a",{attrs:{href:"https://babeljs.io/docs/plugins/transform-async-to-generator/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-3.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript"),a("OutboundLink")],1),e._v(" 的 JS 转译器来转换为自己需要的兼容程度。")]),e._v(" "),a("p",[e._v("最后要说的是，不要盲目地使用最新的技术来写异步代码。理解 JavaScript 中 async 的内部原理是非常重要的，但正如编程中的其它东西一样，每种技术都有其优缺点。")]),e._v(" "),a("h2",{attrs:{id:"书写高可用-强壮的异步代码的-5-条小技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#书写高可用-强壮的异步代码的-5-条小技巧"}},[e._v("#")]),e._v(" 书写高可用，强壮的异步代码的 5 条小技巧")]),e._v(" "),a("p",[e._v("1.简洁：使用 async/await 可以让你写更少的代码。每次书写 async/await 代码，你都可以跳过书写一些不必要的步骤： 比如不用写 "),a("code",[e._v(".then")]),e._v(" 回调，创建匿名函数来处理返回值，命名回调返回值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// `rp` 是个发起 promise 的工具函数。\nrp(‘https://api.example.com/endpoint1').then(function(data) {\n // …\n});\n")])])]),a("p",[e._v("对比：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// `rp` 是个发起 promise 的工具函数\nvar response = await rp(‘https://api.example.com/endpoint1');\n")])])]),a("p",[e._v("2.错误处理：Async/await 允许使用日常的 try/catch 代码结构体来处理同步和异步错误。看下和 Promise 是如何写的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function loadData() {\n    try { // 捕获同步错误.\n        getJSON().then(function(response) {\n            var parsed = JSON.parse(response);\n            console.log(parsed);\n        }).catch(function(e) { // 捕获异步错误.\n            console.log(e); \n        });\n    } catch(e) {\n        console.log(e);\n    }\n}\n")])])]),a("p",[e._v("对比：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("async function loadData() {\n    try {\n        var data = JSON.parse(await getJSON());\n        console.log(data);\n    } catch(e) {\n        console.log(e);\n    }\n}\n")])])]),a("p",[e._v("3.条件语句：使用 "),a("code",[e._v("async/await")]),e._v(" 来书写条件语句会更加直观。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function loadData() {\n  return getJSON()\n    .then(function(response) {\n      if (response.needsAnotherRequest) {\n        return makeAnotherRequest(response)\n          .then(function(anotherResponse) {\n            console.log(anotherResponse)\n            return anotherResponse\n          })\n      } else {\n        console.log(response)\n        return response\n      }\n    })\n}\n")])])]),a("p",[e._v("对比：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("async function loadData() {\n  var response = await getJSON();\n  if (response.needsAnotherRequest) {\n    var anotherResponse = await makeAnotherRequest(response);\n    console.log(anotherResponse)\n    return anotherResponse\n  } else {\n    console.log(response);\n    return response;    \n  }\n}\n")])])]),a("p",[e._v("4.堆栈桢：和 "),a("code",[e._v("async/await")]),e._v(" 不同的是，从链式 promise 返回的错误堆栈中无法得知发生错误的地方。看如下代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function loadData() {\n  return callAPromise()\n    .then(callback1)\n    .then(callback2)\n    .then(callback3)\n    .then(() => {\n      throw new Error("boom");\n    })\n}\nloadData()\n  .catch(function(e) {\n    console.log(err);\n\n// Error: boom at callAPromise.then.then.then.then (index.js:8:13)\n});\n')])])]),a("p",[e._v("对比：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('async function loadData() {\n  await callAPromise1()\n  await callAPromise2()\n  await callAPromise3()\n  await callAPromise4()\n  await callAPromise5()\n  throw new Error("boom");\n}\nloadData()\n  .catch(function(e) {\n    console.log(err);\n    // output\n    // Error: boom at loadData (index.js:7:9)\n});\n')])])]),a("p",[e._v('5.调试：如果使用 promise，你就会明白调试它们是一场噩梦。例如，如果你在 .then 代码块中设置一个断点并且使用诸如 "stop-over" 的调试快捷键，调试器不会移动到下一个 .then 代码块，因为调试器只会步进同步代码。')]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("async/await")]),e._v(" 你可以就像同步代码那样步进到下一个 await 调用。")]),e._v(" "),a("p",[e._v("不仅是程序本身还有库，书写异步 JavaScript 代码都是相当重要的。")])])}),[],!1,null,null,null);t.default=s.exports}}]);