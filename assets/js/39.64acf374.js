(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{386:function(e,r,t){"use strict";t.r(r);var s=t(45),n=Object(s.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("推送机制在手机端已经非常普遍了，但奇怪的是在web上却出现的很迟，即使开发者呼吁这个功能很久了。")]),e._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("网页推送机制，允许用户选择定时更新app。它旨在为用户重新获取其感兴趣，重要和及时的信息。")]),e._v(" "),t("p",[e._v("推送是基于Service Worker的。")]),e._v(" "),t("p",[e._v("使用Service Worker的原因，是他们是后台执行的。这对推送信息来说是非常重要的，因为这意味着只有当用户和推送通知本身进行交互操作才会执行推送通知的相关代码。")]),e._v(" "),t("h2",{attrs:{id:"推送-通知"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送-通知"}},[e._v("#")]),e._v(" 推送 & 通知")]),e._v(" "),t("p",[e._v("推送和通知是不同的API：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Push_API",target:"_blank",rel:"noopener noreferrer"}},[e._v("Push"),t("OutboundLink")],1),e._v(" — 服务端发送信息给Service Worker时触发")]),e._v(" "),t("li",[t("em",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API",target:"_blank",rel:"noopener noreferrer"}},[e._v("Notification"),t("OutboundLink")],1)]),e._v(" — 这是Service Worker或者一个脚本给用户推送信息。")])]),e._v(" "),t("h2",{attrs:{id:"推送"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送"}},[e._v("#")]),e._v(" 推送")]),e._v(" "),t("p",[e._v("实现推送需要三个步骤")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("UI")]),e._v(" — 增加必要的客户端逻辑订阅用户，便于push。在网络应用界面中书写 JavaScript 代码逻辑来让用户注册消息推送服务。")]),e._v(" "),t("li",[t("strong",[e._v("发送推送的消息")]),e._v(" — 服务器实现的API调用，推送消息到用户设备")]),e._v(" "),t("li",[t("strong",[e._v("接受消息")]),e._v(" — 浏览器接收到消息后就处理")])]),e._v(" "),t("p",[e._v("稍后我们讨论更多细节")]),e._v(" "),t("h2",{attrs:{id:"兼容性检测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#兼容性检测"}},[e._v("#")]),e._v(" 兼容性检测")]),e._v(" "),t("p",[e._v("首先，我们需要去检查是否当前的浏览器支持推送消息。我们可以通过两个步骤检测：")]),e._v(" "),t("ol",[t("li",[e._v("检查"),t("code",[e._v("navigator")]),e._v("对象是否有"),t("code",[e._v("serviceWorker")])]),e._v(" "),t("li",[e._v("检查 "),t("code",[e._v("window")]),e._v(" 对象是否有"),t("code",[e._v("PushManager")])])]),e._v(" "),t("p",[e._v("看起来像这样:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (!('serviceWorker' in navigator)) { \n  // Service Worker isn't supported on this browser, disable or hide UI. \n  return; \n}\n\nif (!('PushManager' in window)) { \n  // Push isn't supported on this browser, disable or hide UI. \n  return; \n}\n")])])]),t("h2",{attrs:{id:"注册service-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注册service-worker"}},[e._v("#")]),e._v(" 注册Service Worker")]),e._v(" "),t("p",[e._v("此时，我们知道了支持这个特性。下一步要注册我们的Service Woker.\n你可能已经很熟悉这个流程了")]),e._v(" "),t("h2",{attrs:{id:"请求权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求权限"}},[e._v("#")]),e._v(" 请求权限")]),e._v(" "),t("p",[e._v("After a Service Worker has been registered, we can proceed with subscribing the user. To do so, we need to get his permission to send him push messages.\nService Worker注册之后，下面需要订阅用户。为了这一步，我们需要获取向用户推送信息的权限。\n获取权限的API是非常简单的，但是也有缺点，API从之前的回调变成了返回一个Promise。\n这引入了一个问题，我们不知道当前浏览器实现了哪个版本，所以我们需要实现这两种方式。")]),e._v(" "),t("p",[e._v("像这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function requestPermission() {\n  return new Promise(function(resolve, reject) {\n    const permissionResult = Notification.requestPermission(function(result) {\n      // Handling deprecated version with callback.\n      resolve(result);\n    });\n\n    if (permissionResult) {\n      permissionResult.then(resolve, reject);\n    }\n  })\n  .then(function(permissionResult) {\n    if (permissionResult !== 'granted') {\n      throw new Error('Permission not granted.');\n    }\n  });\n}\n")])])]),t("p",[e._v("调用 "),t("code",[e._v("Notification.requestPermission()")]),e._v(" 将会给用户显示这个")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75639916cb314ec2ad6116a317fc7eea~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),e._v(" "),t("p",[e._v("当权限请求被同意，关闭或者阻塞，我们会相应地给出一个字符串类型的结果"),t("code",[e._v("‘granted’")]),e._v(", "),t("code",[e._v("‘default’")]),e._v(" or "),t("code",[e._v("‘denied’")])]),e._v(" "),t("p",[e._v("如果用户点击了"),t("code",[e._v("Block")]),e._v("，你的app将不会再请求获得权限，知道用户手动改变权限状态，“unblock” 你的app。这个选项隐藏在设置panel里。")]),e._v(" "),t("h2",{attrs:{id:"使用pushmanager订阅用户"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用pushmanager订阅用户"}},[e._v("#")]),e._v(" 使用PushManager订阅用户")]),e._v(" "),t("p",[e._v("Once we have our Service Worker registered and we’ve got permission, we can subscribe a user by calling "),t("code",[e._v("registration.pushManager.subscribe()")]),e._v(" when you register your Service Worker.\n一旦我们注册了Service Worker，取得了权限，就可以在注册服务器线程的时候调用"),t("code",[e._v("registration.pushManager.subscribe()")]),e._v("  订阅用户")]),e._v(" "),t("p",[e._v("代码如下（包括注册服务工作线程）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function subscribeUserToPush() {\n  return navigator.serviceWorker.register('service-worker.js')\n  .then(function(registration) {\n    var subscribeOptions = {\n      userVisibleOnly: true,\n      applicationServerKey: btoa(\n        'BEl62iUYgUivxIkv69yViEuiBIa-Ib9-SkvMeAtA3LFgDzkrxZJjSgSnfckjBJuBkr3qBUYIHBQFLXYp5Nksh8U'\n      )\n    };\n\n    return registration.pushManager.subscribe(subscribeOptions);\n  })\n  .then(function(pushSubscription) {\n    console.log('PushSubscription: ', JSON.stringify(pushSubscription));\n    return pushSubscription;\n  });\n}\n")])])]),t("p",[t("code",[e._v("registration.pushManager.subscribe(options)")]),e._v("  传入一个"),t("em",[e._v("options")]),e._v(" 对象，对象包含了可选和必要的属性")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("userVisibleOnly")]),e._v(": 一个布尔值，表示返回的推送订阅只会用到用户可见的消息上。比如为true，否则会异常。（历史原因）")]),e._v(" "),t("li",[t("strong",[e._v("applicationServerKey")]),e._v(":一个Base64编码的"),t("code",[e._v("DOMString")]),e._v(" 或者 "),t("code",[e._v("ArrayBuffer")]),e._v("，包含了一个认证应用服务的推送服务的公钥。")])]),e._v(" "),t("p",[e._v("你的服务器需要生成一对"),t("strong",[e._v("应用服务密钥 —")]),e._v(" ，他们是VAPID秘钥，对服务端来说是唯一的。\n他们是一对儿，包含了公钥和私钥。私钥保存在推送服务端，公钥则用来和客户端交换数据。密钥允许一个推送服务知道哪个应用服务订阅了用户，并确保推送消息到指定用户的是同一个应用服务器。")]),e._v(" "),t("p",[e._v("你只需要为你的应用创建一次密钥。")]),e._v(" "),t("p",[e._v("当订阅用户时，浏览器传递了 "),t("code",[e._v("applicationServerKey")]),e._v("（公钥）到 推送服务上，这样推送服务就可以绑定你的公钥到用户的"),t("code",[e._v("PushSubscription")]),e._v("\n看看发生了什么：")]),e._v(" "),t("ul",[t("li",[e._v("应用加载，然后调用"),t("code",[e._v("subscribe()")]),e._v(" ,传递服务公钥")]),e._v(" "),t("li",[e._v("浏览器向推送服务发起一个请求，生成一个和密钥结合的终结点，然后返回这个终结点到浏览器")]),e._v(" "),t("li",[e._v("浏览器添加这个终结点到"),t("code",[e._v("subscribe()")]),e._v("返回的"),t("code",[e._v("PushSubscription")]),e._v("对象")])]),e._v(" "),t("p",[e._v("之后，无论何时你想发送一个推送消息，都需要创建一个包含签名信息的"),t("strong",[e._v("鉴权头")]),e._v("，这个签名包含了服务器私钥。当推送服务接收到发送消息的请求，将会查询公钥去验证这个头信息---这个公钥在第二步已经连接到终结点了")]),e._v(" "),t("h2",{attrs:{id:"pushsubscription-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pushsubscription-对象"}},[e._v("#")]),e._v(" PushSubscription 对象")]),e._v(" "),t("p",[t("code",[e._v("PushSubscription")]),e._v(" 包含了所有有的需要给用户设备发送推送消息的相关信息。\n看起来是这样")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "endpoint": "https://domain.pushservice.com/some-id",\\\n        "keys": {                              "p256dh":"BIPUL12DLfytvTajnryr3PJdAgXS3HGMlLqndGcJGabyhHheJYlNGCeXl1dn18gSJ1WArAPIxr4gK0_dQds4yiI=",\\\n        "auth":"FPssMOQPmLmXWmdSTdbKVw=="\\\n    }\n} \n')])])]),t("p",[t("code",[e._v("endpoint")]),e._v(" 是推送服务的URL。为了推送信息，发送一个POST请求到这个URL")]),e._v(" "),t("p",[t("code",[e._v("keys")]),e._v(" 对象包含了用来加密数据的值，这个数据是随推送消息一起发送的")]),e._v(" "),t("p",[e._v("一旦用户被订阅了，就需要发送"),t("code",[e._v("PushSubscription")]),e._v("到服务器。在服务器，你可以在数据库保存订阅数据， 现在开始你就可以发送推送消息给用户")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8cf9078d92641a8a7d703b233b6b23f~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),e._v(" "),t("h2",{attrs:{id:"发送推送消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发送推送消息"}},[e._v("#")]),e._v(" "),t("strong",[e._v("发送推送消息")])]),e._v(" "),t("p",[e._v("如果想给你的用户发送推送消息，第一件事是你需要一个推送服务。你告知服务器需要发送什么数据，消息发给谁，以及如何发送信息的一切细节。一般情况下，这些接口调用是由消息推送服务器来完成的。")]),e._v(" "),t("h2",{attrs:{id:"推送服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送服务"}},[e._v("#")]),e._v(" 推送服务")]),e._v(" "),t("p",[e._v("消息推送服务是用来接收消息推送请求，验证请求以及推送消息到合适的浏览器端。")]),e._v(" "),t("p",[e._v("注意推送服务不是你管理的，它是第三方的服务。你的服务跟推送服务通过API通信。看一个推送服务的例子 "),t("a",{attrs:{href:"https://firebase.google.com/docs/cloud-messaging/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google’s FCM"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("推送服务处理了所有麻烦的事。例如，假如浏览器离线了，在发送消息之前，推送服务将会让消息排队挂起，直到浏览下恢复上线")]),e._v(" "),t("p",[e._v("每一个浏览器可以使用任意推送服务，但这是开发者不能掌控的事情了。")]),e._v(" "),t("p",[e._v("不过，所有的推送服务具有相同的API，这样实现起来就不会太痛苦。")]),e._v(" "),t("p",[e._v("为了获取处理推送消息的请求的URL， 你需要检查"),t("code",[e._v("PushSubscription")]),e._v(" 对象中"),t("code",[e._v("endpoint")]),e._v(" 存储的值。")]),e._v(" "),t("h2",{attrs:{id:"推送服务api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送服务api"}},[e._v("#")]),e._v(" 推送服务API")]),e._v(" "),t("p",[e._v("推送服务API提供了给用户发送消息的方式，这个API被称为 "),t("a",{attrs:{href:"https://tools.ietf.org/html/draft-ietf-webpush-protocol-12",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web Push Protocol"),t("OutboundLink")],1),e._v("，它是根据IEFT规范定义的，这个规范定义了如何调用推送API。\n你发送的推送消息，一定要加密。这样，防止推送服务看到发送的数据。这个很重要，因为浏览器决定了使用哪个推送服务（可能会使用一些不被信任和不安全的消息推送服务）")]),e._v(" "),t("p",[e._v("推送消息的说明如下：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("TTL")]),e._v(" — 定了在被删除或者分发之前，一个消息需要排队多长时间。")]),e._v(" "),t("li",[t("strong",[e._v("Priority")]),e._v(" — 定义了每一个消息的优先级。推送服务将值发送优先级高的消息，以便保护用户的电池生命")]),e._v(" "),t("li",[t("strong",[e._v("Topic")]),e._v(" —给推送消息定义专题名，新消息会替换掉挂起消息中同样专题名的内容，这样一旦设备激活，用户就不会收到过期的信息。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b15cfe7662324b3db12af64d038c9144~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),e._v(" "),t("h2",{attrs:{id:"浏览器的推送事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的推送事件"}},[e._v("#")]),e._v(" 浏览器的推送事件")]),e._v(" "),t("p",[e._v("一旦我们按上面说的，发送信息到推送服务器，消息将会处于挂起状态，直到下面情况发生")]),e._v(" "),t("ul",[t("li",[e._v("设备上线")]),e._v(" "),t("li",[e._v("根据TTL,队列中的消息过期")])]),e._v(" "),t("p",[e._v("当推送服务分发了一个消息，浏览器将会接收，解密，然后在service worker中分发一个"),t("code",[e._v("push")]),e._v("事件")]),e._v(" "),t("p",[e._v("这里有一个比较牛逼的事情，即使你的页面没有打开，浏览器还是可以执行你的ServiceWorker。会发生如下事件：")]),e._v(" "),t("ul",[t("li",[e._v("推送服务达到浏览器，浏览器解密")]),e._v(" "),t("li",[e._v("浏览器唤醒Service Worker")]),e._v(" "),t("li",[e._v("触发"),t("code",[e._v("push")]),e._v("事件到Service Worker")])]),e._v(" "),t("p",[e._v("监听推送事件和在 JavaScript 中写的其它事件监听非常类似")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("self.addEventListener('push', function(event) {\n  var promise = self.registration.showNotification('Push notification!');\n\n  event.waitUntil(promise);\n});\n")])])]),t("p",[e._v("需要理解Service Workers的一点即其运行时间是不可人为控制的。只有浏览器可以唤醒和结束它。")]),e._v(" "),t("p",[e._v("Service Workers中，"),t("code",[e._v("event.waitUntil(promise)")]),e._v(" 告知浏览器持续工作，直到promise完成。如果想完成Service Workers，浏览器就不应该终结它。\n看一个处理"),t("code",[e._v("push")]),e._v(" 事件的例子:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("self.addEventListener('push', function(event) {\n  var promise = self.registration.showNotification('Push notification!');\n\n  event.waitUntil(promise);\n});\n")])])]),t("p",[e._v("调用 "),t("code",[e._v("self.registration.showNotification()")]),e._v(" 向用户弹出一个通知并且返回一个 promise，一旦通知显示完成即解析完成。")]),e._v(" "),t("p",[e._v("可以采用可视化的方法来设置符合自己需求的 "),t("code",[e._v("showNotification(title, options)")]),e._v(" 方法。"),t("code",[e._v("title")]),e._v(" 参数是字符串而 options 是一个类似如下的对象：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\\\n"//": "Visual Options",\\\n"body": "<String>",\\\n"icon": "<URL String>",\\\n"image": "<URL String>",\\\n"badge": "<URL String>",\\\n"vibrate": "<Array of Integers>",\\\n"sound": "<URL String>",\\\n"dir": "<String of \'auto\' | \'ltr\' | \'rtl\'>",\\\n\\\n"//": "Behavioural Options",\\\n"tag": "<String>",\\\n"data": "<Anything>",\\\n"requireInteraction": "<boolean>",\\\n"renotify": "<Boolean>",\\\n"silent": "<Boolean>",\\\n\\\n"//": "Both Visual & Behavioural Options",\\\n"actions": "<Array of Strings>",\\\n\\\n"//": "Information Option. No visual affect.",\\\n"timestamp": "<Long>"\\\n}\n')])])]),t("p",[e._v("更多细节— "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("当有重要，紧急，实时的信息需要分享给用户，那么推送通知是获取用户注意力的好办法，")])])}),[],!1,null,null,null);r.default=n.exports}}]);