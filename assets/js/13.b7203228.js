(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{394:function(t,e,a){"use strict";a.r(e);var n=a(45),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("客户端的Web应用已经越来越重了，这是由于人民群众日益增长的审美需求导致的。客户端需要提供更丰富的交互，实时计算等等。\n复杂性的增长，让我们准确的知道运行期间任意时刻UI的状态、\n当你构建一个框架或者库，需要通过监测 DOM 来响应并执行一些特定的操作，那就更困难了。")]),t._v(" "),a("h1",{attrs:{id:"概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver",target:"_blank",rel:"noopener noreferrer"}},[t._v("MutationObserver "),a("OutboundLink")],1),t._v("是现代浏览器提供的WEB API，用来监听DOM的变化。用它可以监听到最新增加/删除的节点，节点属性的改变，以及文本节点中文本的改变。")]),t._v(" "),a("p",[t._v("什么场景下要这么做呢？")]),t._v(" "),a("ul",[a("li",[t._v("你想通知用户，他当前的页面已经改变了。")]),t._v(" "),a("li",[t._v("使用一些根据DOM变化动态加载JS模块的框架")]),t._v(" "),a("li",[t._v("如果是一个WYSIWYG编辑器，要实现undo/redo功能。通过MutationObserver API，你就知道发生了什么改变，然后轻松的undo它们。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/671c241257594d3ab9f35813724325ef~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}}),t._v("\n看看MutationObserver 是如何起作用的。")]),t._v(" "),a("h2",{attrs:{id:"怎么使用mutationobserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么使用mutationobserver"}},[t._v("#")]),t._v(" 怎么使用MutationObserver")]),t._v(" "),a("p",[t._v("在应用中实现"),a("code",[t._v("MutationObserver")]),t._v("是非常简单的。你可以在创建"),a("code",[t._v("MutationObserver")]),t._v(" 实例时传递一个函数，这个函数会在每次DOM改变时触发。这个函数的第一个参数，是在一个批次中所有发生变化的DOM集合。每一个改变，包含了它的类型和发生的改变。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var mutationObserver = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    console.log(mutation);\n  });\n});\n")])])]),a("p",[t._v("创建的对象有三个方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("observe")]),t._v(" — 开始监听变化。有两个参数，你想监听的DOM和一个配置的对象。")]),t._v(" "),a("li",[a("code",[t._v("disconnect")]),t._v(" —  停止监听")]),t._v(" "),a("li",[a("em",[a("code",[t._v("takeRecords")])]),t._v(" — 在回调触犯之前返回最近一个批次的变换，")])]),t._v(" "),a("p",[t._v("启动监听:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// Starts listening for changes in the root HTML element of the page.\nmutationObserver.observe(document.documentElement, {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true,\n  attributeOldValue: true,\n  characterDataOldValue: true\n});\n")])])]),a("p",[t._v("看一个简单的例子")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div id="sample-div" class="test"> Simple div </div>\n')])])]),a("p",[t._v("使用jQuery 删除"),a("code",[t._v("class")]),t._v(" 属性")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$("#sample-div").removeAttr("class");\n')])])]),a("p",[t._v("调用"),a("code",[t._v("mutationObserver.observe(...)")]),t._v(" 之后，我们将会看到打印出"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord",target:"_blank",rel:"noopener noreferrer"}},[t._v("MutationRecord"),a("OutboundLink")],1),t._v("日志\n"),a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ada84e679ea4df4b64e730cf6838341~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}}),t._v("\n这次的变化是通过移除 "),a("code",[t._v("class")]),t._v(" 属性触发的.")]),t._v(" "),a("p",[t._v("当任务完成之后，如果要停止监听DOM，要这么做")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// Stops the MutationObserver from listening for changes.\nmutationObserver.disconnect();\n")])])]),a("p",[t._v("如今 "),a("code",[t._v("MutationObserver")]),t._v(" 已经被广泛支持了:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da72fb1e3db24c878729126f014f2550~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"替代方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#替代方案"}},[t._v("#")]),t._v(" 替代方案")]),t._v(" "),a("p",[t._v("但是"),a("code",[t._v("MutationObserver")]),t._v("还没有完全推开,在此之前开发者需要怎么做呢")]),t._v(" "),a("p",[t._v("有一些其他的可选方案:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Polling")])]),t._v(" "),a("li",[a("strong",[t._v("MutationEvents")])]),t._v(" "),a("li",[a("strong",[t._v("CSS animations")])])]),t._v(" "),a("h2",{attrs:{id:"polling-轮询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#polling-轮询"}},[t._v("#")]),t._v(" Polling （轮询）")]),t._v(" "),a("p",[t._v("最简单暴力的方式是去轮询。使用浏览器的setInterval方法，可以设置一个任务，周期性的检查有什么变化。这个方式自然会影响到app的性能。")]),t._v(" "),a("h2",{attrs:{id:"mutationevents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutationevents"}},[t._v("#")]),t._v(" MutationEvents")]),t._v(" "),a("p",[t._v("早在2000年，就引入了"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events",target:"_blank",rel:"noopener noreferrer"}},[t._v("MutationEvents API"),a("OutboundLink")],1),t._v(" 。尽管很有用，但是DOM的每一次改变都会触发mutation事件，这也引入了性能问题。如今"),a("code",[t._v("Muatation")]),t._v("API已经被遗弃了，很快所有的浏览器也都会不支持。\n"),a("code",[t._v("MutationEvents")]),t._v("支持情况：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f318f380f58445ea5047623a74f5c48~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"css-动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-动画"}},[t._v("#")]),t._v(" CSS 动画")]),t._v(" "),a("p",[t._v("一个相对陌生的替代方案是，是使用"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS animations"),a("OutboundLink")],1),t._v(".\n听起来有点诡异。这个方案是创建一个动画，一旦DOM中添加元素就会被触发。动画一开始， "),a("code",[t._v("animationstart")]),t._v(" 事件就会被触发：如果此时你添加了对该事件的监听，你就会知道DOM中添加了什么元素。动效的执行时间应该很小，这样用户觉察不到。")]),t._v(" "),a("p",[t._v("首先，我们需要一个父元素包含它，然后插入节点监听")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<div id=”container-element”></div>\n")])])]),a("p",[t._v("为了监听节点插入，我们需要设置一系列的"),a("a",{attrs:{href:"https://www.w3schools.com/cssref/css3_pr_animation-keyframes.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("关键帧"),a("OutboundLink")],1),t._v("，该动画在添加节点的时候启动：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@keyframes nodeInserted { \n from { opacity: 0.99; }\n to { opacity: 1; } \n}\n")])])]),a("p",[t._v("关键帧创建之后，动画需要应用在你想监听的元素上。注意执行时间要断--这样浏览器中几乎感受不到")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#container-element * {\n animation-duration: 0.001s;\n animation-name: nodeInserted;\n}\n")])])]),a("p",[t._v("这个代码把动画添加到"),a("code",[t._v("container-element")]),t._v("的所有子节点上，当动画结束，会触发插入事件")]),t._v(" "),a("p",[t._v("我们需要一个JS函数，作为事件的监听者。在函数内部，初始化"),a("code",[t._v("event.animationName")]),t._v("检查必须确保是我们所监听的动画")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var insertionListener = function(event) {\n  // Making sure that this is the animation we want.\n  if (event.animationName === "nodeInserted") {\n    console.log("Node has been inserted: " + event.target);\n  }\n}\n')])])]),a("p",[t._v("给父节点添加监听:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("document.addEventListener(“animationstart”, insertionListener, false); // standard + firefox\ndocument.addEventListener(“MSAnimationStart”, insertionListener, false); // IE\ndocument.addEventListener(“webkitAnimationStart”, insertionListener, false); // Chrome + Safari\n")])])]),a("p",[t._v("CSS动画的支持情况：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9ab8909e041444a9396fffb0a9c1ed8~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),a("p",[a("code",[t._v("MutationObserver")]),t._v("的提供了比上述都好的方案。它包含可每一个DOM中可能发生的变化，而且性能更好。最关键的是，几乎所有的浏览器都支持它，同时还有两个基于"),a("code",[t._v("MutationEvents")]),t._v("实现的polyfills")])])}),[],!1,null,null,null);e.default=s.exports}}]);