(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{387:function(t,r,a){"use strict";a.r(r);var v=a(45),e=Object(v.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本章将会深入谷歌 V8 引擎的内部结构。我们也会为如何书写更好的 JavaScript 代码提供几条小技巧。")]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("一个 JavaScript 引擎就是一个程序或者一个解释器，它运行 JavaScript 代码。"),a("br"),t._v("\n一个 JavaScript 引擎可以用标准解释器或者即时编译器来实现，即时编译器即以某种形式把 JavaScript 解释为字节码。")]),t._v(" "),a("p",[t._v("以下是一系列实现 JavaScript 引擎的热门项目：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("V8")]),a("OutboundLink")],1),t._v("－由谷歌开源的以 C++ 语言编写")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Rhino_%28JavaScript_engine%29",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Rhin")]),a("OutboundLink")],1),t._v("－由 Mozilla 基金会主导，开源的，完全使用 Java 开发。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/SpiderMonkey_%28JavaScript_engine%29",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("SpiderMonkey")]),a("OutboundLink")],1),t._v("－初代 JavaScript 引擎，由在之前由网景浏览器提供技术支持，现在由 Firefox 使用。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/JavaScriptCore",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("JavaScriptCore")]),a("OutboundLink")],1),t._v("－开源，以 Nitro 的名称来推广，并由苹果为 Safari 开发。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/KJS_%28KDE%29",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("KJS")]),a("OutboundLink")],1),t._v("－KDE 引擎，起先是由 Harri Porten 为 KDE 工程的 Konqueror 浏览器所开发。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Chakra_%28JScript_engine%29",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Chakra")]),t._v(" (JScript9)"),a("OutboundLink")],1),t._v("－IE")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Chakra_%28JavaScript_engine%29",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Chakra")]),t._v(" (JavaScript)"),a("OutboundLink")],1),t._v("－Microsoft Edge")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Nashorn_%28JavaScript_engine%29",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Nashorn")]),a("OutboundLink")],1),t._v("－作为 OpenJDK 的一部分来开源，由 Oracle Java 语言和 Tool Group 编写。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/JerryScript",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("JerryScript")]),a("OutboundLink")],1),t._v("－一款轻量级的物联网引擎。")])]),t._v(" "),a("h2",{attrs:{id:"v8-引擎的由来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-引擎的由来"}},[t._v("#")]),t._v(" V8 引擎的由来")]),t._v(" "),a("p",[t._v("V8 引擎是由谷歌开源并以 C++ 语言编写。"),a("br"),t._v("\nChrome 内置了这个引擎，也被应用于时下流行的 Node.js 运行时中。")]),t._v(" "),a("p",[t._v("起先 V8 是被设计用来优化网页浏览器中的 JavaScript运行性能的。"),a("br"),t._v("\n为了达到更快的执行速度，V8 通过实现一个即时编译器（JIT）在运行阶段把 JavaScript 代码编译为机器码，就像诸如 SpiderMonkey or Rhino (Mozilla) 等JavaScript引擎所做的那样。\n同时V8 不产生字节码或者任何的中间码。")]),t._v(" "),a("blockquote",[a("p",[t._v("PS：解释器和编译器的区别是什么？")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c2cc0945cb04c85a5a6fbb386b96a80~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),a("blockquote",[a("p",[t._v("机器码是CPU可以直接执行的代码，一般由编译器生成。\n字节码也是中间代码的一种，比如JAVA的编译就是字节码。执行时，字节码会被解释器解释成机器码。")])]),t._v(" "),a("h2",{attrs:{id:"v8-曾经拥有两个编译器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-曾经拥有两个编译器"}},[t._v("#")]),t._v(" V8 曾经拥有两个编译器")]),t._v(" "),a("p",[t._v("在 V8 5.9诞生(2017 年初) 之前，引擎拥有两个编译器：")]),t._v(" "),a("ul",[a("li",[t._v("full-codegen－一个简单且快速的编译器用来产出简单且运行相对缓慢的机器码。")]),t._v(" "),a("li",[t._v("Crankshaft－一个更复杂(即时)优化的编译器用来产生高效的代码。")])]),t._v(" "),a("p",[t._v("V8 引擎内部也使用多个线程：")]),t._v(" "),a("ul",[a("li",[t._v("主线程做你所期望的事情---抓取代码，编译后执行")]),t._v(" "),a("li",[t._v("有独立的线程来编译代码，这样就可以独立优化代码而不阻塞主线程")]),t._v(" "),a("li",[t._v("一个用于性能检测的线程会告诉运行时我们在哪个方法上花了太多的时间，以便于让 Crankshaft 来优化这些代码")]),t._v(" "),a("li",[t._v("有几个线程用来处理垃圾回收器的清理工作。")])]),t._v(" "),a("p",[t._v("当第一次执行 JavaScript 代码的时候，V8 使用 full-codegen 直接把解析后的JavaScript代码解析为机器码，中间没有任何转换。这使得它一开始非常快速地运行机器码。注意到 V8 没有使用中间字节码来表示，这样就不需要解释器了。")]),t._v(" "),a("p",[t._v("当代码执行一段时间后，性能检测器线程已经收集了足够多的数据来告诉 Crankshaft 哪个函数可以被优化。")]),t._v(" "),a("p",[t._v("接下来，在另一个线程中开始进行 Crankshaft 代码优化。它把 JavaScript 语法抽象树（AST）转化为一个被称为 "),a("strong",[t._v("Hydrogen")]),t._v(" 的高级静态单赋值（SSA）表征，并且试着优化这个 Hydrogen 图表。大多数的代码优化是发生在这里。\n来看看有哪些优化动作：")]),t._v(" "),a("h2",{attrs:{id:"内联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内联"}},[t._v("#")]),t._v(" 内联")]),t._v(" "),a("p",[t._v("第一个优化方法即是提前尽可能多地内联代码。"),a("br"),t._v("\n内联指的是把调用地址置换为被调用函数的函数体的过程。这个简单的步骤使得接下来的代码优化更有意义。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b5198f3ad3d4756a513586a53623d1e~tplv-k3u1fbpfcp-zoom-1.image",alt:""}}),a("br"),t._v("\n如图所示，我们在main中调用了function1 和function2。"),a("br"),t._v("\n内联之后，function1 和function2 里的函数体，直接被复制到了main中。")]),t._v(" "),a("h2",{attrs:{id:"隐藏类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐藏类"}},[t._v("#")]),t._v(" 隐藏类")]),t._v(" "),a("p",[t._v("JavaScript 是基于原型的语言：当进行克隆的时候不会创建新的类和对象。"),a("br"),t._v("\nJavaScript 也是一门动态编程语言，实例化之后，可以任意地添加或者移除属性。")]),t._v(" "),a("p",[t._v("大多数的 JavaScript 解释器使用类字典的结构(基于哈希函数)在内存中存储对象属性值的内存地址。"),a("br"),t._v("\n相比Java 或者 C# 的静态编程语言，这种结构使得在 JavaScript 中获取属性值时会更浪费时间。"),a("br"),t._v("\n在静态编程语言中，所有的对象属性都在编译前就已经知道了对象的数据结构，而静态语言一旦生成就不能增删它的属性和属性值对应的类型。"),a("br"),t._v("\n因此，可以将属性值(指向这些属性的指针)以连续的缓冲区的形式存储在内存之中，因为位移的长度可以基于属性类型被简单地计算出来。"),a("br"),t._v("\n然而在 JavaScript 中这是不可能的，因为运行时可以改变属性类型。")]),t._v(" "),a("p",[t._v("由于使用字典在内存中寻找对象属性的内存地址是非常低效的，V8 转而使用隐藏类。隐藏类工作原理和静态语言中使用的固定对象布局(类)相似，只不过隐藏类是在运行时生成的，而静态语言是在编译时生成。"),a("br"),t._v("\n现在，让我们看看他们的样子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nvar p1 = new Point(1, 2);\n")])])]),a("p",[t._v('一旦调用"new Point(1,2)" ，V8 创建一个叫做 "C0" 的隐藏类。')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22074d995fe54c42966c07b2553712f5~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("p",[t._v('此时还没有为类 Point 创建属性，所以 "C0" 是空的。')]),t._v(" "),a("p",[t._v('一旦第一条语句 "this.x = x" 开始执行(在 Point 函数中), V8 将会基于 "C0" 创建第二个隐藏类。"C1"指向了可以找到 x 属性的内存地址(相当于对象指针)。'),a("br"),t._v('\n本例中，"x" 存储在位移为 0 的地址中，这意味着当以连续缓冲区来内存中查看point对象的时候，位移起始处即和属性 "x" 保持一致。V8 将会使用 "类转换" 来更新 "C0"，"类转换" 表示如果属性 "x" 是否被添加进point对象，隐藏类将会从 "C0" 切换为"C1"。'),a("br"),t._v('\n以下的点对象的隐藏类现在是 "C1"。')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/134927ee5c6e48fd868633efda6f41df~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("p",[a("em",[t._v("每当对象添加新的属性，使用转换路径来把旧的隐藏类更新为新的隐藏类。隐藏类转换是重要的，它们使得用同样方式创建的对象可以共享隐藏类。如果两个对象共享一个隐藏类并且两个对象添加了相同的属性，隐藏类转换会确保两个对象收到相同的新的隐藏类，并且确保所有的优化过的代码都会包含这些新的隐藏类。")])]),t._v(" "),a("p",[t._v('当运行 "this.y = y" 语句的时候，会重复同样的过程(还是在 Point 函数中，在 "this.x = x" 语句之后)。')]),t._v(" "),a("p",[t._v('新建了一个 "C2" 的隐藏类，一个类转换被添加进 "C1" 中，表示属性 "y" 如果被添加进point对象之后隐藏会更改为 "C2"，然后ponit对象的隐藏类会更新为 "C2"。')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d4dec740e1041fc8e57060e3ff07e66~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("p",[t._v("隐藏类转换依赖于属性被添加进对象的顺序。看如下的代码片段：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nvar p1 = new Point(1, 2);\np1.a = 5;\np1.b = 6;\n\nvar p2 = new Point(3, 4);\np2.b = 7;\np2.a = 8;\n")])])]),a("p",[t._v('你可能会以为 p1 和 p2 会使用相同的隐藏类和类转换。然而， "p1"先添加属性 "a" 然后再添加属性 "b"。"p2"，先添加属性 "b" 然后是 "a"。因为使用不同的转换路径，所以"p1" 和 "p2" 会使用不同的隐藏类。所以，更好的方法是以相同的顺序初始化动态属性以便于复用隐藏类。')]),t._v(" "),a("h2",{attrs:{id:"内联缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内联缓存"}},[t._v("#")]),t._v(" 内联缓存")]),t._v(" "),a("p",[t._v("V8 使用的另一项优化动态类型语言的技术叫做内联缓存。内联缓存依赖于这样一个观察，相同类型的对象往往会有相同方法的重复调用。这里有一份深入阐述内联缓存的"),a("a",{attrs:{href:"https://github.com/sq/JSIL/wiki/Optimizing-dynamic-JavaScript-with-inline-caches",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("先讲一下内联缓存的大概概念(万一你还不是很了解)。")]),t._v(" "),a("p",[t._v("它是如何工作的呢？")]),t._v(" "),a("p",[t._v("V8 会维护一份对象类型的缓存，这个对象类型是最近被调用的函数的入参类型。V8使用这份信息假设在未来某个时候这个对象类型将会被再次传入这个函数，这样它就可以绕过寻找访问该对象属性的过程，代之以使用已经储存起来的对象隐藏类的信息。")]),t._v(" "),a("p",[t._v("那么隐藏类和内联缓存是如何联系在一起的呢？")]),t._v(" "),a("p",[t._v("每当在一个指定的对象上调用对象里的方法的时候，V8 引擎不得不执行查找对象隐藏类的操作，用来取得指定属性对应的位移。在两次成功调用相同隐藏类的相同方法之后，V8 就会忽略隐藏类的查找并且只是简单地把属性的位移添加给对象指针的起始位置上。之后所有对这个方法的调用，V8 引擎假设隐藏类没有改变，然后使用之前查找到的位移来直接跳转到指定属性的内存地址。这极大地提升了代码运行速度。")]),t._v(" "),a("p",[t._v("内存缓存也是为什么同样类型的对象共享隐藏类是如此重要的原因。当你创建了两个同样类型的对象而使用不同的隐藏类(正如之前的例子所做的那样)，V8 将不可能使用内存缓存，因为即使相同类型的两个对象，他们对应的隐藏类为他们的属性分派不同的地址位移。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9948b0fc9c2c4d568004d39ca9f1edc2~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("p",[a("em",[t._v('这两个对象基本上是一样的但是创建 "a" 和 "b" 的顺序是不同的')])]),t._v(" "),a("h2",{attrs:{id:"编译为机器码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译为机器码"}},[t._v("#")]),t._v(" 编译为机器码")]),t._v(" "),a("p",[t._v("一旦优化了 Hydrogen 图表，Crankshaft 会把它降级为低级的展现叫做 Lithium。大多数 Lithium 的实现都是依赖于指定的架构的。寄存器分配发生在这一层。")]),t._v(" "),a("p",[t._v("最后，Lithium 会被编译为机器码。之后被称为 OSR（"),a("a",{attrs:{href:"https://www.zhihu.com/question/45910849",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是OSR"),a("OutboundLink")],1),t._v("） 的事情发生了：运行时栈替换。在开始编译和优化一个耗时明显的方法之前，极有可能去运行OSR。V8 不会忘记代码执行缓慢的地方，再次运行时就会调用优化过的版本。它会转换所有的上下文(堆栈，寄存器)，这样就可以在执行过程中切换到优化的版本代码。这是一个复杂的任务，你只需要记住的是，在其它优化过程中，V8 会初始化内联代码。")]),t._v(" "),a("p",[t._v("这里还有被称为逆优化的安全防护，以防止当引擎所假设的事情没有发生的时候，可以进行逆向转换和把代码反转为未优化的代码。")]),t._v(" "),a("h2",{attrs:{id:"垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),a("p",[t._v("V8 使用传统的标记-清除技术来清理旧内存以进行垃圾回收。标记阶段会中止 JavaScript 的运行。"),a("br"),t._v("\n为了控制垃圾回收的成本并且使得代码执行更加稳定，V8 使用了增量标记法：不遍历整个内存堆去试图标记每个可能的对象，它只是遍历一部分堆，然后重启正常的代码执行。下一个垃圾回收点将会从上一个堆遍历中止的地方开始执行。这会在正常的代码执行过程中有一个非常短暂的间隙。之前提到过，清除阶段是由单独的线程处理的。")]),t._v(" "),a("h2",{attrs:{id:"ignition-和-turbofan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignition-和-turbofan"}},[t._v("#")]),t._v(" Ignition 和 TurboFan")]),t._v(" "),a("p",[t._v("随着 2017 早些时候 V8 5.9 版本的发布，带来了一个新的执行管道。新的管道获得了更大的性能提升，在现实 JavaScript 程序中也显著地节省了内存。")]),t._v(" "),a("p",[t._v("新的执行管道是建立在新的 V8 解释器 Ignition 和 V8 最新的优化编译器 TurboFan 之上的。")]),t._v(" "),a("p",[t._v("你可以查看 V8 小组的"),a("a",{attrs:{href:"https://v8project.blogspot.bg/2017/05/launching-ignition-and-turbofan.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("博文"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("自从 V8 5.9 版本发布以来，full-codegen 和 Crankshaft(V8 从 2010 开始使用至今) 不再被 V8 用来运行JavaScript，因为 V8 小组正努力跟上新的 JavaScript 语言功能以及为这些功能做优化。")]),t._v(" "),a("p",[t._v("这意味着接下来整个 V8 将会更加精简和更具可维护性。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0172e382b12458fa9fd3fb5ca462b58~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("p",[a("em",[t._v("网页和 Node.js benchmarks 评分的提升")])]),t._v(" "),a("p",[t._v("这些提升只是一个开始。新的 Ignition 和 TurboFan 管道会为未来的优化作铺垫，它会在未来几年内提升 JavaScript 性能，减少 Chrome 和 Node.js 中的 V8 痕迹。")]),t._v(" "),a("p",[t._v("最后，这里有一些如何写出优化良好的，更好的 JavaScript 代码。如果你看懂了上面的帖子，可能自己就能总结一些出来")]),t._v(" "),a("h2",{attrs:{id:"如何写优化的-javascript-代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何写优化的-javascript-代码"}},[t._v("#")]),t._v(" 如何写优化的 JavaScript 代码")]),t._v(" "),a("ul",[a("li",[t._v("对象属性有序化：总是以相同的顺序实例化对象属性，这样隐藏类及之后的优化代码都可以被共享。")]),t._v(" "),a("li",[t._v("动态属性：实例化之后为对象添加属性会致使为之前隐藏类优化的方法变慢。相反，在对象构造函数中赋值对象的所有属性。")]),t._v(" "),a("li",[t._v("方法：重复执行相同方法的代码会比每次运行不同的方法的代码更快(多亏了内联缓存)。")]),t._v(" "),a("li",[t._v("数组：避免使用键不是递增数字的稀疏数组。稀疏数组中没有包含每个元素的数列称为一个哈希表。访问该数组中的元素会更加耗时。同样地，试着避免预先分配大型数组。最好是随着使用而递增。最后，不要删除数组中的元素。这会让键稀疏。")]),t._v(" "),a("li",[t._v("标记值：V8 用 32 位来表示对象和数字。它使用一位来辨别是对象(flag=1)或者是被称为 SMI(小整数) 的整数(flag=0)，之所以是小整数是因为它是 31 位的。之后，如果一个数值比 31 位还要大，V8 将会装箱数字，把它转化为浮点数并且创建一个新的对象来存储这个数字。尽可能试着使用 31 位有符号数字来避免创建 JS 对象的耗时装箱操作。")])]),t._v(" "),a("h2",{attrs:{id:"单词表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单词表"}},[t._v("#")]),t._v(" 单词表")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("标题")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("interpreter")]),t._v(" "),a("td",[t._v("解释器")])]),t._v(" "),a("tr",[a("td",[t._v("obtain")]),t._v(" "),a("td",[t._v("获得")])]),t._v(" "),a("tr",[a("td",[t._v("intermediate code")]),t._v(" "),a("td",[t._v("中间码")])]),t._v(" "),a("tr",[a("td",[t._v("separate")]),t._v(" "),a("td",[t._v("独立的")])]),t._v(" "),a("tr",[a("td",[t._v("former/later")]),t._v(" "),a("td",[t._v("前者/后者")])]),t._v(" "),a("tr",[a("td",[t._v("representation")]),t._v(" "),a("td",[t._v("表征")])]),t._v(" "),a("tr",[a("td",[t._v("in advance")]),t._v(" "),a("td",[t._v("提前")])]),t._v(" "),a("tr",[a("td",[t._v("instantiation")]),t._v(" "),a("td",[t._v("实例化")])]),t._v(" "),a("tr",[a("td",[t._v("retrieving")]),t._v(" "),a("td",[t._v("检索")])]),t._v(" "),a("tr",[a("td",[t._v("computationally")]),t._v(" "),a("td",[t._v("计算")])]),t._v(" "),a("tr",[a("td",[t._v("correspond")]),t._v(" "),a("td",[t._v("对应")])]),t._v(" "),a("tr",[a("td",[t._v("safeguards")]),t._v(" "),a("td",[t._v("保障")])]),t._v(" "),a("tr",[a("td",[t._v("box")]),t._v(" "),a("td",[t._v("装箱")])])])])])}),[],!1,null,null,null);r.default=e.exports}}]);