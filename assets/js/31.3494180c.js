(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{378:function(e,s,t){"use strict";t.r(s);var a=t(45),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("本文阅读指数:3"),t("br"),e._v("\nDeno出来一段时间了，之前了解的并不多。本文算是科普性质，提供了一些点，都是日常做技术选择关注的点。可以一读")])]),e._v(" "),t("h1",{attrs:{id:"总览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总览"}},[e._v("#")]),e._v(" 总览")]),e._v(" "),t("p",[e._v("Deno是一个JS和TS的安全运行时。这一章简单介绍一下Deno，跟Node的区别，解析一些机制比如模块，包，异步，TS，安全和工具。")]),e._v(" "),t("h1",{attrs:{id:"deno起源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deno起源"}},[e._v("#")]),e._v(" Deno起源")]),e._v(" "),t("p",[e._v("Ryan Dahl’s在2018年的JSConfEU中“10 Things I Regret About Node.js”中宣布了Deno。开发者看到自己的项目受众越来越多，被使用在各个地方，并从项目的失误中学习。正常的开发者会去提高或者重构源项目。但是Ryan Dahl更激进，他害怕破坏掉兼容性。")]),e._v(" "),t("p",[e._v("但是Deno还是很年轻的，2020年5越才发布正是第一个版本。\n对比一下Deno 和 Node")]),e._v(" "),t("h1",{attrs:{id:"deno-vs-node-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deno-vs-node-js"}},[e._v("#")]),e._v(" Deno vs. Node.js")]),e._v(" "),t("p",[e._v("下面是主要的区别。稍后我们会深入到机制。但是目前还是从功能性和开发者体验上说")]),e._v(" "),t("p",[e._v("#内置包管理 vs npm")]),e._v(" "),t("p",[e._v("node需要Npm来做包管理。Deno则从GO和RUST中学习，使用URL进行包引用。")]),e._v(" "),t("h1",{attrs:{id:"es-modules-vs-commonjs-modules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-modules-vs-commonjs-modules"}},[e._v("#")]),e._v(" ES modules vs. CommonJS modules")]),e._v(" "),t("p",[e._v("Node 使用CommonJS 规范:")]),e._v(" "),t("blockquote",[t("p",[e._v("const module = require(‘module-name’)")])]),e._v(" "),t("p",[e._v("Deno 使用标准的 EcmaScript modules:")]),e._v(" "),t("blockquote",[t("p",[e._v("import module from ‘https://some-repo/module-name.ts'")])]),e._v(" "),t("p",[e._v("注意Deno需要模块的全部名词，包括扩展名。")]),e._v(" "),t("h1",{attrs:{id:"基于权限的访问-vs-全文访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于权限的访问-vs-全文访问"}},[e._v("#")]),e._v(" 基于权限的访问 vs. 全文访问")]),e._v(" "),t("p",[e._v("Node可以全文访问环境，文件系统和网络。这是严重的安全漏洞。恶意的npm模块可以轻易访问这些资源。\nDeno需要明确的权限，这样就能限制一些不好的行为。")]),e._v(" "),t("h1",{attrs:{id:"内置ts编译器-vs-外部支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置ts编译器-vs-外部支持"}},[e._v("#")]),e._v(" 内置TS编译器 vs. 外部支持")]),e._v(" "),t("p",[e._v("Node不能直接使用YS。你需要使用一些很重的工具链近期编译")]),e._v(" "),t("p",[e._v("Deno则天生支持TS，使用起来更加流畅")]),e._v(" "),t("h1",{attrs:{id:"promises-vs-回调"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promises-vs-回调"}},[e._v("#")]),e._v(" Promises vs. 回调")]),e._v(" "),t("p",[e._v("Node使用不阻塞的I/O，然后当I/O操作完成时，需要用回调来处理通知")]),e._v(" "),t("p",[e._v("Deno则使用async/await 模式，隐藏了回调链的复杂性，然代码更干净。")]),e._v(" "),t("h1",{attrs:{id:"异常死亡-vs-未捕获异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常死亡-vs-未捕获异常"}},[e._v("#")]),e._v(" 异常死亡 vs. 未捕获异常")]),e._v(" "),t("p",[e._v("在Node中你可以写一个全局的句柄来处理所有未捕获的异常")]),e._v(" "),t("blockquote",[t("p",[e._v("process.on(‘uncaughtException’, function (err) {")]),e._v(" "),t("p",[e._v("console.log(‘ignoring…’);")]),e._v(" "),t("p",[e._v("})")])]),e._v(" "),t("p",[e._v("在Deno时，如果有未捕获异常，程序就会死掉。这个决策很重要。\n深入的看一下Deno的一些特性：")]),e._v(" "),t("h1",{attrs:{id:"模块和包管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块和包管理"}},[e._v("#")]),e._v(" 模块和包管理")]),e._v(" "),t("p",[e._v("Deno通过URL引入模块，这就不需要 "),t("strong",[e._v("package.json")]),e._v(" 和 "),t("strong",[e._v("node_modules")]),e._v("。这就意味着，没有缓存了，你只用下载一次包和模块。比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { assertEquals } from \"https://deno.land/std@0.93.0/testing/asserts.ts\";\nassertEquals(2 + 2, 5);\nconsole.log('success!')\n")])])]),t("p",[e._v("可以看到，因为2+2等于4，这个程序会出错。Deno也是这么认为的")]),e._v(" "),t("blockquote",[t("p",[e._v("$ deno run ./assert.ts")]),e._v(" "),t("p",[e._v("error: Uncaught AssertionError: Values are not equal:")]),e._v(" "),t("p",[e._v("[Diff] Actual / Expected")]),e._v(" "),t("ul",[t("li",[e._v("4")])]),e._v(" "),t("ul",[t("li",[e._v("5")])]),e._v(" "),t("p",[e._v("throw new AssertionError(message);")]),e._v(" "),t("p",[e._v("^")]),e._v(" "),t("p",[e._v("at assertEquals (https://deno.land/std@0.93.0/testing/asserts.ts:219:9)")]),e._v(" "),t("p",[e._v("at file:///Users/gigi.sayfan/git/deno_test/assert.ts:3:1")])]),e._v(" "),t("p",[e._v("改一下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { assertEquals } from \"https://deno.land/std@0.93.0/testing/asserts.ts\";\nassertEquals(2 + 2, 4);\nconsole.log('success!')\n")])])]),t("p",[e._v("ow, it succeeds:")]),e._v(" "),t("blockquote",[t("p",[e._v("$ deno run ./assert.ts")]),e._v(" "),t("p",[e._v("Check file:///Users/gigi.sayfan/git/deno_test/assert.ts")]),e._v(" "),t("p",[e._v("success!")])]),e._v(" "),t("p",[e._v("OK了。\n看一下包和导入")]),e._v(" "),t("blockquote",[t("p",[e._v('import { assertEquals } from “https://deno.land/std@0.93.0/testing/asserts.ts";')])]),e._v(" "),t("p",[e._v("这里通过URL导入了一个"),t("strong",[e._v("assertEquals")]),e._v(" symbol，这是在Deno标准库中做的事情。\n注意URL中包含了版本信息，所以自然支持同一个包的不同版本。")]),e._v(" "),t("p",[e._v("Deno维护了一个规划中的包列表"),t("a",{attrs:{href:"https://deno.land/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://deno.land"),t("OutboundLink")],1),e._v("  但你可以从任何url中导入包")]),e._v(" "),t("p",[e._v("可以尝试着从GitHub的URL上导入一个包")]),e._v(" "),t("blockquote",[t("p",[e._v('import { assertEquals } from “https://raw.githubusercontent.com/denoland/deno_std/main/testing/asserts.ts"')])]),e._v(" "),t("h1",{attrs:{id:"异步支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步支持"}},[e._v("#")]),e._v(" 异步支持")]),e._v(" "),t("p",[e._v("Deno的异步API会返回promise.这样你可以运行你的异步操作，然后await结果，而不用去处理一团乱麻的回调函数")]),e._v(" "),t("p",[e._v("比如:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const promise = Deno.run({cmd: ['deno', 'eval', 'console.log(2+3)']})\nawait promise.status()\n\n/*\n\nOutput:\n5\n\n*/\n")])])]),t("p",[e._v("我们使用 "),t("strong",[e._v("Deno.run()")]),e._v(" 运行了一个子进程。子进程是另一个Deno的实例，然后我们传递了表达式"),t("strong",[e._v("console.log(2+3)")]),e._v(" ，它会在控制台输出5")]),e._v(" "),t("p",[e._v("对于运行时间比较长的任务，为了不阻塞当前线程，我们可以使用await "),t("strong",[e._v("promise.status()")])]),e._v(" "),t("h1",{attrs:{id:"deno-和-ts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deno-和-ts"}},[e._v("#")]),e._v(" Deno 和 TS")]),e._v(" "),t("p",[e._v("Deno内置了对TS的支持，这样你就不需要工具链来进行编译了。Deno自带了一个TS的编译器，并把转换后的TS模块放在缓存中。当TS文件改动时，会被重新编译一下，保持更新。\n查看缓存位置，和已有的模块信息：")]),e._v(" "),t("blockquote",[t("p",[e._v("$ deno info")]),e._v(" "),t("p",[e._v("DENO_DIR location: “/Users/gigi.sayfan/Library/Caches/deno”")]),e._v(" "),t("p",[e._v("Remote modules cache: “/Users/gigi.sayfan/Library/Caches/deno/deps”")]),e._v(" "),t("p",[e._v("Emitted modules cache: “/Users/gigi.sayfan/Library/Caches/deno/gen”")]),e._v(" "),t("p",[e._v("Language server registries cache: “/Users/gigi.sayfan/Library/Caches/deno/registries”")])]),e._v(" "),t("h1",{attrs:{id:"安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[e._v("#")]),e._v(" 安全")]),e._v(" "),t("p",[e._v("Deno自下而上的保证安全，控制用户可以访问的权限。\n网络，环境，文件系统默认是不可访问的资源。比如，我们尝试写一个文件：")]),e._v(" "),t("p",[e._v("假如代码放在 "),t("strong",[e._v("write_file.ts")]),e._v("中.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Deno.writeTextFileSync('data.txt', 'some data')\n")])])]),t("p",[e._v("运行一下:")]),e._v(" "),t("blockquote",[t("p",[e._v("$ deno run write_file.ts")]),e._v(" "),t("p",[e._v("Check file:///Users/gigi.sayfan/git/deno_test/write_file.ts")]),e._v(" "),t("p",[e._v("error: Uncaught PermissionDenied: Requires write access to “1.txt”, run again with the — allow-write flag")]),e._v(" "),t("p",[e._v("Deno.writeTextFileSync(‘data.txt’, ‘some data’)")]),e._v(" "),t("p",[e._v("^")]),e._v(" "),t("p",[e._v("at unwrapOpResult (deno:core/core.js💯13)")]),e._v(" "),t("p",[e._v("at Object.opSync (deno:core/core.js:114:12)")]),e._v(" "),t("p",[e._v("at openSync (deno:runtime/js/40_files.js:32:22)")]),e._v(" "),t("p",[e._v("at writeFileSync (deno:runtime/js/40_write_file.js:24:18)")]),e._v(" "),t("p",[e._v("at Object.writeTextFileSync (deno:runtime/js/40_write_file.js:82:12)")]),e._v(" "),t("p",[e._v("at file:///Users/gigi.sayfan/git/deno_test/write_file.ts:1:6")])]),e._v(" "),t("p",[e._v("抛出一个权限错误，告诉我们需要增加一个flag值。然后我们重新运行一下：")]),e._v(" "),t("blockquote",[t("p",[e._v("$ deno run — allow-write write_file.ts")]),e._v(" "),t("p",[e._v("Check file:///Users/gigi.sayfan/git/deno_test/write_file.ts")]),e._v(" "),t("p",[e._v("$ cat data.txt")]),e._v(" "),t("p",[e._v("some data")])]),e._v(" "),t("p",[e._v("现在可以了。因此，要小心运行你的Deno代码。")]),e._v(" "),t("h1",{attrs:{id:"工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[e._v("#")]),e._v(" 工具")]),e._v(" "),t("p",[e._v("Deno很注重开发者体验，所以提供了很多工具。看看有哪些：")]),e._v(" "),t("h1",{attrs:{id:"格式化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#格式化"}},[e._v("#")]),e._v(" 格式化")]),e._v(" "),t("p",[e._v("假如有文件 "),t("strong",[e._v("fmt-test.ts")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function foo()\n{\n    console.log('foo here')\n  const x    = 3\n         console.log('x + 2 =', x+2)\n}\n\nfoo()\n")])])]),t("p",[e._v("它是TS的，但是代码写的很乱")]),e._v(" "),t("p",[e._v("我们执行一个命令 "),t("strong",[e._v("deno fmt")]),e._v(":")]),e._v(" "),t("blockquote",[t("p",[e._v("$ cat fmt_test.ts | deno fmt -")])]),e._v(" "),t("p",[e._v("我们会得到:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function foo() {\n  console.log("foo here");\n  const x = 3;\n  console.log("x + 2 =", x + 2);\n}\n\nfoo();\n')])])]),t("p",[e._v("效果不错")]),e._v(" "),t("h1",{attrs:{id:"测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),t("p",[e._v("测试的重要性无容置疑，Deno不需要借用第三方的框架，只要使用自己的断言模块就可以。")]),e._v(" "),t("p",[e._v("我们再文件"),t("strong",[e._v("test-test.ts")]),e._v("中定义了一个函数"),t("strong",[e._v("is_palindrome()")]),e._v(" ，用来检查字符串是否回文，然后加一些测试。前两哥测试应该通过，而第三个应该失败。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import { assert } from "https://deno.land/std@0.95.0/testing/asserts.ts";\n\nfunction is_palindrome(s: string) {\n  const ss = s.replaceAll(\' \', \'\')\n  const a = ss.split(\'\')\n  return a.reverse().join(\'\') == ss\n} \n\nawait Deno.test("Palindrome 1 - success", () => {\n  assert(is_palindrome("tattarrattat"));\n})\n\nawait Deno.test("Palindrome 2 - success", () => {\n  assert(is_palindrome("never odd or even"));\n})\n\nawait Deno.test("Palindrome 3 - fail", () => {\n  assert(is_palindrome("this is not a palindrom"), "fail!")\n})\n')])])]),t("p",[e._v("运行 "),t("strong",[e._v("deno test")]),e._v(" 命令:")]),e._v(" "),t("blockquote",[t("p",[e._v("$ deno test test_test.ts")]),e._v(" "),t("p",[e._v("Check file:///Users/gigi.sayfan/git/deno_test/$deno$test.ts")]),e._v(" "),t("p",[e._v("running 3 tests")]),e._v(" "),t("p",[e._v("test Palindrome 1 — success … ok (1ms)")]),e._v(" "),t("p",[e._v("test Palindrome 2 — success … ok (1ms)")]),e._v(" "),t("p",[e._v("test Palindrome 3 — fail … FAILED (2ms)")]),e._v(" "),t("p",[e._v("failures:")]),e._v(" "),t("p",[e._v("Palindrome 3 — fail")]),e._v(" "),t("p",[e._v("AssertionError: fail!")]),e._v(" "),t("p",[e._v("at assert (https://deno.land/std@0.95.0/testing/asserts.ts:178:11)")]),e._v(" "),t("p",[e._v("at file:///Users/gigi.sayfan/git/deno_test/test_test.ts:19:3")]),e._v(" "),t("p",[e._v("at asyncOpSanitizer (deno:runtime/js/40_testing.js:37:15)")]),e._v(" "),t("p",[e._v("at resourceSanitizer (deno:runtime/js/40_testing.js:73:13)")]),e._v(" "),t("p",[e._v("at Object.exitSanitizer [as fn] (deno:runtime/js/40_testing.js💯15)")]),e._v(" "),t("p",[e._v("at TestRunner.[Symbol.asyncIterator] (deno:runtime/js/40_testing.js:272:24)")]),e._v(" "),t("p",[e._v("at AsyncGenerator.next ("),t("anonymous",[e._v(")\nat Object.runTests (deno:runtime/js/40_testing.js:347:22)")])],1),e._v(" "),t("p",[e._v("at async file:///Users/gigi.sayfan/git/deno_test/$deno$test.ts:3:1")]),e._v(" "),t("p",[e._v("failures:")]),e._v(" "),t("p",[e._v("Palindrome 3 — fail")]),e._v(" "),t("p",[e._v("test result: FAILED. 2 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out (4ms)")])]),e._v(" "),t("h1",{attrs:{id:"构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建"}},[e._v("#")]),e._v(" 构建")]),e._v(" "),t("p",[e._v("构建可以让所有的包集成在一个bundle中。Deno提供了"),t("strong",[e._v("bundle")]),e._v("命令。\n假如"),t("strong",[e._v("foobar.ts")]),e._v(" 模块从 "),t("strong",[e._v("foo.ts")]),e._v("中引入了 **foo()"),t("strong",[e._v("函数，从")]),e._v("bar.ts."),t("strong",[e._v("中引入了")]),e._v("bar()**函数")]),e._v(" "),t("p",[t("strong",[e._v("foo.ts")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export function foo() {\n    console.log('foo')\n}\n")])])]),t("p",[t("strong",[e._v("bar.ts")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export function bar() {\n\n console.log('bar') \n}\n")])])]),t("p",[t("strong",[e._v("foobar.ts")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import { foo } from "./foo.ts"\nimport { bar } from "./bar.ts"\n\nfoo()\nbar()\n')])])]),t("p",[e._v("Let’s bundle them all up into a single file:")]),e._v(" "),t("blockquote",[t("p",[e._v("$ deno bundle foobar.ts")]),e._v(" "),t("p",[e._v("Bundle file:///Users/gigi.sayfan/git/deno_test/foobar.ts")]),e._v(" "),t("p",[e._v("Check file:///Users/gigi.sayfan/git/deno_test/foobar.ts")])]),e._v(" "),t("p",[e._v("Here is the result:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function foo() {\n    console.log('foo');\n}\nfunction bar() {\n    console.log('bar');\n}\nfoo();\nbar();\n")])])]),t("p",[e._v("可以看到，import声明已经不见了，"),t("strong",[e._v("foo()")]),e._v("  和 "),t("strong",[e._v("bar()")]),e._v(" 被直接嵌入到一个bundle文件中了。")]),e._v(" "),t("h1",{attrs:{id:"调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[e._v("#")]),e._v(" 调试")]),e._v(" "),t("p",[e._v("运行时使用 "),t("strong",[e._v("— inspect")]),e._v(" 或者**— inspect-brk** 标记，就可以使用Chrome DevTool来进行调试。个人推荐使用 JetBrains IDEs 和一些deno插件。\n如果使用VSCode，就需要手动配置一下"),t("strong",[e._v("launch.json")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "name": "Deno",\n      "type": "pwa-node",\n      "request": "launch",\n      "cwd": "${workspaceFolder}",\n      "runtimeExecutable": "deno",\n      "runtimeArgs": ["run", "--inspect-brk", "-A", "${file}"],\n      "attachSimplePort": 9229\n    }\n  ]\n}\n')])])]),t("h1",{attrs:{id:"脚本安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚本安装"}},[e._v("#")]),e._v(" 脚本安装")]),e._v(" "),t("p",[e._v("使用命令行经常会要传递很多额外的参数，不太方便。你可以使用 "),t("strong",[e._v("deno install")]),e._v("来做一些启动脚本，把这个脚本放在你想放的位置，或者**$HOME/.deno/bin**\n我们安装一个foobar")]),e._v(" "),t("blockquote",[t("p",[e._v("$ deno install foobar.ts")]),e._v(" "),t("p",[e._v("✅ Successfully installed foobar")]),e._v(" "),t("p",[e._v("/Users/gigi.sayfan/.deno/bin/foobar")]),e._v(" "),t("p",[e._v("ℹ️ Add /Users/gigi.sayfan/.deno/bin to PATH")]),e._v(" "),t("p",[e._v("export PATH=”/Users/gigi.sayfan/.deno/bin:$PATH”")])]),e._v(" "),t("p",[e._v("我在PATH环境变量中增加了**$HOME/.deno/bin**。这样我可以在任意位置执行"),t("strong",[e._v("foobar")]),e._v("，运行脚本")]),e._v(" "),t("blockquote",[t("p",[e._v("$ cd /tmp")]),e._v(" "),t("p",[e._v("$ foobar")]),e._v(" "),t("p",[e._v("foo")]),e._v(" "),t("p",[e._v("bar")])]),e._v(" "),t("h1",{attrs:{id:"deno-机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deno-机制"}},[e._v("#")]),e._v(" Deno 机制")]),e._v(" "),t("p",[e._v("Deno是基于Rust和TypeScript来实现的。主要的组件有这些：")]),e._v(" "),t("ul",[t("li",[e._v("deno")]),e._v(" "),t("li",[e._v("deno_core")]),e._v(" "),t("li",[e._v("tsc")]),e._v(" "),t("li",[e._v("swc")]),e._v(" "),t("li",[e._v("rusty_v8\n[deno]创建了可执行的deno，我们与之交互。\n[deno_core]创建JS运行时。Deno使用了 "),t("a",{attrs:{href:"https://lib.rs/crates/tokio",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tokio"),t("OutboundLink")],1),e._v(" 来实现异步事件循环。\n"),t("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler",target:"_blank",rel:"noopener noreferrer"}},[e._v("tsc"),t("OutboundLink")],1),e._v("是一个TS的标准编译器。也用来做类型检查。\n"),t("a",{attrs:{href:"https://swc.rs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("swc"),t("OutboundLink")],1),e._v("用来加速Web编译，现在主要编译你的JS和TS代码。\n[rustry_v8]则使用Rust与V8的C++ API绑定。")])]),e._v(" "),t("h1",{attrs:{id:"综述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#综述"}},[e._v("#")]),e._v(" 综述")]),e._v(" "),t("p",[e._v("Deno很年轻，但是不可小觑。它基于Node的经验和教训来设计的。它的技术提升远远超过了Node,并且使用了更加现代的技术栈。最大的问题是它会不会在成为JS和TS的后台运行时。现在说还为时尚早，但是如果真的这样，我还是很期待的。")])])}),[],!1,null,null,null);s.default=n.exports}}]);